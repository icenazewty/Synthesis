<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\METER_V2_GD32E503RCT6.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\METER_V2_GD32E503RCT6.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Fri Apr 29 16:13:52 2022
<BR><P>
<H3>Maximum Stack Usage =        780 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; RTU_Process &rArr; Local_RTU &rArr; ads1247_calibrate &rArr; WriteParametersADS1247 &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[41]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">ADC0_1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[41]">ADC0_1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5e]">ADC2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[29]">BusFault_Handler</a> from gd32e50x_it.o(.text.BusFault_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[45]">CAN0_EWMC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[44]">CAN0_RX1_IRQHandler</a> from gd32e50x_it.o(.text.CAN0_RX1_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6e]">CAN1_EWMC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6c]">CAN1_RX0_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6d]">CAN1_RX1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6b]">CAN1_TX_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3a]">DMA0_Channel0_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3b]">DMA0_Channel1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3c]">DMA0_Channel2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3d]">DMA0_Channel3_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3e]">DMA0_Channel4_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3f]">DMA0_Channel5_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[40]">DMA0_Channel6_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[67]">DMA1_Channel0_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[68]">DMA1_Channel1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[69]">DMA1_Channel2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6a]">DMA1_Channel3_4_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[2c]">DebugMon_Handler</a> from gd32e50x_it.o(.text.DebugMon_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5f]">EXMC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[35]">EXTI0_IRQHandler</a> from gd32e50x_it.o(.text.EXTI0_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[57]">EXTI10_15_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[36]">EXTI1_IRQHandler</a> from gd32e50x_it.o(.text.EXTI1_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[37]">EXTI2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[38]">EXTI3_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[39]">EXTI4_IRQHandler</a> from gd32e50x_it.o(.text.EXTI4_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[46]">EXTI5_9_IRQHandler</a> from gd32e50x_it.o(.text.EXTI5_9_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[33]">FMC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[27]">HardFault_Handler</a> from gd32e50x_it.o(.text.HardFault_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4f]">I2C0_ER_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4e]">I2C0_EV_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[51]">I2C1_ER_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[50]">I2C1_EV_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[77]">I2C2_ER_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[76]">I2C2_EV_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[79]">I2C2_WKUP_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[30]">LVD_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[28]">MemManage_Handler</a> from gd32e50x_it.o(.text.MemManage_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[26]">NMI_Handler</a> from gd32e50x_it.o(.text.NMI_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[2d]">PendSV_Handler</a> from gd32e50x_it.o(.text.PendSV_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[34]">RCU_CTC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[58]">RTC_Alarm_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[32]">RTC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[25]">Reset_Handler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[60]">SDIO_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[74]">SHRTIMER_IRQ0_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[75]">SHRTIMER_IRQ1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6f]">SHRTIMER_IRQ2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[70]">SHRTIMER_IRQ3_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[71]">SHRTIMER_IRQ4_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[72]">SHRTIMER_IRQ5_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[73]">SHRTIMER_IRQ6_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[52]">SPI0_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[53]">SPI1_I2S1ADD_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[62]">SPI2_I2S2ADD_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[2b]">SVC_Handler</a> from gd32e50x_it.o(.text.SVC_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[2e]">SysTick_Handler</a> from gd32e50x_it.o(.text.SysTick_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[7c]">SystemInit</a> from system_gd32e50x.o(.text.SystemInit) referenced from startup_gd32e50x_hd.o(.text)
 <LI><a href="#[31]">TAMPER_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[47]">TIMER0_BRK_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4a]">TIMER0_Channel_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[49]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[48]">TIMER0_UP_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4b]">TIMER1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4c]">TIMER2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4d]">TIMER3_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[61]">TIMER4_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[65]">TIMER5_DAC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[66]">TIMER6_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5a]">TIMER7_BRK_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5d]">TIMER7_Channel_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5c]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5b]">TIMER7_UP_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[63]">UART3_IRQHandler</a> from gd32e50x_it.o(.text.UART3_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[64]">UART4_IRQHandler</a> from gd32e50x_it.o(.text.UART4_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[54]">USART0_IRQHandler</a> from gd32e50x_it.o(.text.USART0_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[55]">USART1_IRQHandler</a> from gd32e50x_it.o(.text.USART1_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[56]">USART2_IRQHandler</a> from gd32e50x_it.o(.text.USART2_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[78]">USART5_IRQHandler</a> from gd32e50x_it.o(.text.USART5_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[7a]">USART5_WKUP_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[42]">USBD_HP_CAN0_TX_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[43]">USBD_LP_CAN0_RX0_IRQHandler</a> from gd32e50x_it.o(.text.USBD_LP_CAN0_RX0_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[59]">USBD_WKUP_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[2a]">UsageFault_Handler</a> from gd32e50x_it.o(.text.UsageFault_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[2f]">WWDGT_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[7d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32e50x_hd.o(.text)
 <LI><a href="#[13]">_usb_config_desc_get</a> from usbd_enum.o(.text._usb_config_desc_get) referenced 2 times from usbd_enum.o(.data.std_desc_get)
 <LI><a href="#[12]">_usb_dev_desc_get</a> from usbd_enum.o(.text._usb_dev_desc_get) referenced 2 times from usbd_enum.o(.data.std_desc_get)
 <LI><a href="#[80]">_usb_in0_transc</a> from usbd_transc.o(.text._usb_in0_transc) referenced 2 times from usbd_core.o(.text.usbd_init)
 <LI><a href="#[7f]">_usb_out0_transc</a> from usbd_transc.o(.text._usb_out0_transc) referenced 2 times from usbd_core.o(.text.usbd_init)
 <LI><a href="#[7e]">_usb_setup_transc</a> from usbd_transc.o(.text._usb_setup_transc) referenced 2 times from usbd_core.o(.text.usbd_init)
 <LI><a href="#[1]">_usb_std_clearfeature</a> from usbd_enum.o(.text._usb_std_clearfeature) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[7]">_usb_std_getconfiguration</a> from usbd_enum.o(.text._usb_std_getconfiguration) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[5]">_usb_std_getdescriptor</a> from usbd_enum.o(.text._usb_std_getdescriptor) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[9]">_usb_std_getinterface</a> from usbd_enum.o(.text._usb_std_getinterface) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[0]">_usb_std_getstatus</a> from usbd_enum.o(.text._usb_std_getstatus) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[2]">_usb_std_reserved</a> from usbd_enum.o(.text._usb_std_reserved) referenced 4 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[4]">_usb_std_setaddress</a> from usbd_enum.o(.text._usb_std_setaddress) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[8]">_usb_std_setconfiguration</a> from usbd_enum.o(.text._usb_std_setconfiguration) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[6]">_usb_std_setdescriptor</a> from usbd_enum.o(.text._usb_std_setdescriptor) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[3]">_usb_std_setfeature</a> from usbd_enum.o(.text._usb_std_setfeature) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[a]">_usb_std_setinterface</a> from usbd_enum.o(.text._usb_std_setinterface) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[b]">_usb_std_synchframe</a> from usbd_enum.o(.text._usb_std_synchframe) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[14]">_usb_str_desc_get</a> from usbd_enum.o(.text._usb_str_desc_get) referenced 2 times from usbd_enum.o(.data.std_desc_get)
 <LI><a href="#[f]">cdc_acm_ctlx_out</a> from cdc_acm_core.o(.text.cdc_acm_ctlx_out) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[10]">cdc_acm_data_in</a> from cdc_acm_core.o(.text.cdc_acm_data_in) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[11]">cdc_acm_data_out</a> from cdc_acm_core.o(.text.cdc_acm_data_out) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[d]">cdc_acm_deinit</a> from cdc_acm_core.o(.text.cdc_acm_deinit) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[c]">cdc_acm_init</a> from cdc_acm_core.o(.text.cdc_acm_init) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[e]">cdc_acm_req_handler</a> from cdc_acm_core.o(.text.cdc_acm_req_handler) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[81]">fputc</a> from main.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[7b]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[18]">usbd_address_set</a> from usbd_lld_core.o(.text.usbd_address_set) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[15]">usbd_core_reset</a> from usbd_lld_core.o(.text.usbd_core_reset) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[16]">usbd_core_stop</a> from usbd_lld_core.o(.text.usbd_core_stop) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[17]">usbd_dp_pullup</a> from usbd_lld_core.o(.text.usbd_dp_pullup) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[21]">usbd_ep_data_read</a> from usbd_lld_core.o(.text.usbd_ep_data_read) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[20]">usbd_ep_data_write</a> from usbd_lld_core.o(.text.usbd_ep_data_write) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[1e]">usbd_ep_disable</a> from usbd_lld_core.o(.text.usbd_ep_disable) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[1c]">usbd_ep_reset</a> from usbd_lld_core.o(.text.usbd_ep_reset) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[1f]">usbd_ep_rx_enable</a> from usbd_lld_core.o(.text.usbd_ep_rx_enable) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[1d]">usbd_ep_setup</a> from usbd_lld_core.o(.text.usbd_ep_setup) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[23]">usbd_ep_stall_clear</a> from usbd_lld_core.o(.text.usbd_ep_stall_clear) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[22]">usbd_ep_stall_set</a> from usbd_lld_core.o(.text.usbd_ep_stall_set) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[24]">usbd_ep_status</a> from usbd_lld_core.o(.text.usbd_ep_status) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[1a]">usbd_leave_suspend</a> from usbd_lld_core.o(.text.usbd_leave_suspend) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[1b]">usbd_resume</a> from usbd_lld_core.o(.text.usbd_resume) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[19]">usbd_suspend</a> from usbd_lld_core.o(.text.usbd_suspend) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(.text)
</UL>
<P><STRONG><a name="[16e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[82]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[96]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[16f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[170]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[171]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[172]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[173]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[25]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA1_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>I2C2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SHRTIMER_IRQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>SHRTIMER_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SHRTIMER_IRQ2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SHRTIMER_IRQ3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SHRTIMER_IRQ4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>SHRTIMER_IRQ5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SHRTIMER_IRQ6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI1_I2S1ADD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SPI2_I2S2ADD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>USART5_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_net
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_ads1247
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Calc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Calc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Calc
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Calc
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[17b]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[88]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[83]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[17c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[17d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[17e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[17f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>ADC_Cycle_Detect_Process</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ad_process.o(.text.ADC_Cycle_Detect_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ADC_Cycle_Detect_Process &rArr; V_Calc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Calc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>ADC_GPIO_Configuration</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ad_process.o(.text.ADC_GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADC_GPIO_Configuration &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[9d]"></a>ADC_Inititile</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ad_process.o(.text.ADC_Inititile))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ADC_Inititile &rArr; ADC_GPIO_Configuration &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_tempsensor_vrefint_enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mode_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_inserted_channel_config
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Configuration
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_software_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>ADS1247_IO_Init</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, ads1247.o(.text.ADS1247_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ADS1247_IO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>ADS1247_Init</STRONG> (Thumb, 652 bytes, Stack size 64 bytes, ads1247.o(.text.ADS1247_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ADS1247_Init &rArr; ADS_WREG &rArr; ADS_WriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WREG
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_RREG
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_CS
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>ADS_CS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ads1247.o(.text.ADS_CS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADS_CS &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADSConversionData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WREG
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_RREG
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads1247_Mode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_Init
</UL>

<P><STRONG><a name="[b4]"></a>ADS_RREG</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ads1247.o(.text.ADS_RREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADS_RREG &rArr; ADS_ReadByte &rArr; ADS_WriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WriteByte
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_ReadByte
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_Init
</UL>

<P><STRONG><a name="[b7]"></a>ADS_ReadByte</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ads1247.o(.text.ADS_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADS_ReadByte &rArr; ADS_WriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADSConversionData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_RREG
</UL>

<P><STRONG><a name="[b5]"></a>ADS_WREG</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ads1247.o(.text.ADS_WREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADS_WREG &rArr; ADS_WriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WriteByte
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_Init
</UL>

<P><STRONG><a name="[b6]"></a>ADS_WriteByte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ads1247.o(.text.ADS_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADS_WriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WREG
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_ReadByte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_RREG
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads1247_Mode
</UL>

<P><STRONG><a name="[e4]"></a>ADT</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, ads1247.o(.text.ADT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADT
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AI_Data
</UL>

<P><STRONG><a name="[bb]"></a>AI_Channel_Select</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, gd32e503v_eval.o(.text.AI_Channel_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AI_Channel_Select &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1247_calibrate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>Ad_software_trigger</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ad_process.o(.text.Ad_software_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ad_software_trigger &rArr; adc_software_trigger_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[bd]"></a>Android_Ctrl</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.Android_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Android_Ctrl &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>Beep</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.Beep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Beep &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.CAN0_RX1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[157]"></a>Clear_Uart_Buffer</STRONG> (Thumb, 176 bytes, Stack size 4 bytes, comm_process.o(.text.Clear_Uart_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Clear_Uart_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>Com2Com</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, comm_process.o(.text.Com2Com))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Com2Com &rArr; Com_Send &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Rev_Timeout
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>Com_Rev_Timeout</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, comm_process.o(.text.Com_Rev_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Com_Rev_Timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com2Com
</UL>

<P><STRONG><a name="[c1]"></a>Com_Send</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, gd32e503v_eval.o(.text.Com_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Com_Send &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Retransmission
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com2Com
</UL>

<P><STRONG><a name="[d6]"></a>CrcCheck</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.CrcCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CrcCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
</UL>

<P><STRONG><a name="[c5]"></a>DO_Output_Ctrl</STRONG> (Thumb, 510 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.DO_Output_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DO_Output_Ctrl &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
</UL>

<P><STRONG><a name="[2c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>Detect_Gateway</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, w5500.o(.text.Detect_Gateway))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Detect_Gateway &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
</UL>

<P><STRONG><a name="[ca]"></a>Do_Get_Sta</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.Do_Get_Sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Do_Get_Sta &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_IRQHandler &rArr; exti_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI1_IRQHandler &rArr; exti_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_IRQHandler &rArr; exti_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.EXTI5_9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI5_9_IRQHandler &rArr; exti_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>FLASH_Data_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, main.o(.text.FLASH_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FLASH_Data_Init &rArr; SPI_FLASH_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>Get_Android_Sta</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gd32e503v_eval.o(.text.Get_Android_Sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Get_Android_Sta &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>Led_Ctrl</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.Led_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Led_Ctrl &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>Load_ADS1247_Parameters</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, cfg_flash.o(.text.Load_ADS1247_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Load_ADS1247_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_ads1247
</UL>

<P><STRONG><a name="[14f]"></a>Load_Net_Parameters</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, cfg_flash.o(.text.Load_Net_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Load_Net_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_net
</UL>

<P><STRONG><a name="[d5]"></a>Local_RTU</STRONG> (Thumb, 4310 bytes, Stack size 120 bytes, comm_process.o(.text.Local_RTU))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = Local_RTU &rArr; ads1247_calibrate &rArr; WriteParametersADS1247 &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1247_calibrate
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DO_Output_Ctrl
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheck
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersToIICAll
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Android_Ctrl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTU_Process
</UL>

<P><STRONG><a name="[28]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>Power4G_Ctrl</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.Power4G_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Power4G_Ctrl &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
</UL>

<P><STRONG><a name="[dc]"></a>PowerWifiBle_Ctrl</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.PowerWifiBle_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PowerWifiBle_Ctrl &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
</UL>

<P><STRONG><a name="[dd]"></a>Process_Socket_Data</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, w5500.o(.text.Process_Socket_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Process_Socket_Data &rArr; Read_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_2Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>RTU_Process</STRONG> (Thumb, 864 bytes, Stack size 40 bytes, comm_process.o(.text.RTU_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = RTU_Process &rArr; Local_RTU &rArr; ads1247_calibrate &rArr; WriteParametersADS1247 &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Retransmission
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>ReadADSConversionData</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ads1247.o(.text.ReadADSConversionData))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ReadADSConversionData &rArr; ADS_ReadByte &rArr; ADS_WriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_ReadByte
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AI_Data
</UL>

<P><STRONG><a name="[10f]"></a>ReadFlash_CPU</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, cfg_flash.o(.text.ReadFlash_CPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadFlash_CPU
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersToIICAll
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersADS1247
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_net
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_ads1247
</UL>

<P><STRONG><a name="[e3]"></a>Read_AI_Data</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ads1247.o(.text.Read_AI_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Read_AI_Data &rArr; ReadADSConversionData &rArr; ADS_ReadByte &rArr; ADS_WriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADSConversionData
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADT
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1247_calibrate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>Read_Ads1247_Mode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ads1247.o(.text.Read_Ads1247_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Read_Ads1247_Mode &rArr; ADS_WriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WriteByte
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1247_calibrate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>Read_DI_Input_State</STRONG> (Thumb, 612 bytes, Stack size 8 bytes, gd32e503v_eval.o(.text.Read_DI_Input_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_DI_Input_State &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>Read_SOCK_Data_Buffer</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, w5500.o(.text.Read_SOCK_Data_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Read_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_2Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_read_byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_Data
</UL>

<P><STRONG><a name="[ec]"></a>Read_SW_Input_State</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, gd32e503v_eval.o(.text.Read_SW_Input_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Read_SW_Input_State &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>Read_W5500_1Byte</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, w5500.o(.text.Read_W5500_1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Read_W5500_1Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_read_byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
</UL>

<P><STRONG><a name="[c9]"></a>Read_W5500_SOCK_1Byte</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, w5500.o(.text.Read_W5500_SOCK_1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Read_W5500_SOCK_1Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_read_byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
</UL>

<P><STRONG><a name="[e7]"></a>Read_W5500_SOCK_2Byte</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, w5500.o(.text.Read_W5500_SOCK_2Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Read_W5500_SOCK_2Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_read_byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[e1]"></a>Retransmission</STRONG> (Thumb, 1056 bytes, Stack size 24 bytes, comm_process.o(.text.Retransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Retransmission &rArr; WriteParametersToIICAll &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersToIICAll
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTU_Process
</UL>

<P><STRONG><a name="[d2]"></a>SPI_FLASH_BufferRead</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, spi_flash.o(.text.SPI_FLASH_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Data_Init
</UL>

<P><STRONG><a name="[cf]"></a>SPI_FLASH_Init</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, spi_flash.o(.text.SPI_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SPI_FLASH_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Data_Init
</UL>

<P><STRONG><a name="[d0]"></a>SPI_FLASH_ReadID</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, spi_flash.o(.text.SPI_FLASH_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Data_Init
</UL>

<P><STRONG><a name="[ef]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, spi_flash.o(.text.SPI_FLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI_FLASH_SendByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>

<P><STRONG><a name="[2b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>Socket_Connect</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, w5500.o(.text.Socket_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Socket_Connect &rArr; Write_W5500_SOCK_1Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Socket_Set
</UL>

<P><STRONG><a name="[ee]"></a>Socket_Init</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, w5500.o(.text.Socket_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Socket_Init &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Retransmission
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
</UL>

<P><STRONG><a name="[f1]"></a>Socket_Listen</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, w5500.o(.text.Socket_Listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Socket_Listen &rArr; Write_W5500_SOCK_1Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Socket_Set
</UL>

<P><STRONG><a name="[f2]"></a>Socket_UDP</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, w5500.o(.text.Socket_UDP))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Socket_UDP &rArr; Write_W5500_SOCK_1Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Socket_Set
</UL>

<P><STRONG><a name="[2e]"></a>SysTick_Handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SystemInit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, system_gd32e50x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemInit &rArr; system_clock_config &rArr; system_clock_168m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>T_Calc</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ad_process.o(.text.T_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = T_Calc &rArr; Temperature_adc_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_adc_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cycle_Detect_Process
</UL>

<P><STRONG><a name="[f8]"></a>Temperature_adc_cal</STRONG> (Thumb, 202 bytes, Stack size 4 bytes, ad_process.o(.text.Temperature_adc_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Temperature_adc_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_Calc
</UL>

<P><STRONG><a name="[63]"></a>UART3_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART3_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART4_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART4_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART0_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART0_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART1_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USART2_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART2_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>USART5_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.USART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART5_IRQHandler &rArr; usart5_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_interrupt_flag_get
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.USBD_LP_CAN0_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_LP_CAN0_RX0_IRQHandler &rArr; usbd_isr &rArr; usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>V_Calc</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, ad_process.o(.text.V_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = V_Calc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cycle_Detect_Process
</UL>

<P><STRONG><a name="[100]"></a>W5500_Hardware_Reset</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, w5500.o(.text.W5500_Hardware_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W5500_Hardware_Reset &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>W5500_Init</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, w5500.o(.text.W5500_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = W5500_Init &rArr; Write_W5500_nByte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_nByte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_2Byte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
</UL>

<P><STRONG><a name="[105]"></a>W5500_Initialization</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, w5500.o(.text.W5500_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = W5500_Initialization &rArr; W5500_Init &rArr; Write_W5500_nByte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>W5500_Interrupt_Process</STRONG> (Thumb, 746 bytes, Stack size 56 bytes, w5500.o(.text.W5500_Interrupt_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = W5500_Interrupt_Process &rArr; Socket_Init &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>W5500_Socket_Set</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, w5500.o(.text.W5500_Socket_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = W5500_Socket_Set &rArr; Socket_UDP &rArr; Write_W5500_SOCK_1Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>WriteFlash_CPU</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, cfg_flash.o(.text.WriteFlash_CPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersToIICAll
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersADS1247
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_net
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_ads1247
</UL>

<P><STRONG><a name="[10e]"></a>WriteParametersADS1247</STRONG> (Thumb, 178 bytes, Stack size 280 bytes, cfg_flash.o(.text.WriteParametersADS1247))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = WriteParametersADS1247 &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash_CPU
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1247_calibrate
</UL>

<P><STRONG><a name="[da]"></a>WriteParametersToIICAll</STRONG> (Thumb, 178 bytes, Stack size 280 bytes, cfg_flash.o(.text.WriteParametersToIICAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = WriteParametersToIICAll &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash_CPU
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Retransmission
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
</UL>

<P><STRONG><a name="[df]"></a>Write_SOCK_Data_Buffer</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, w5500.o(.text.Write_SOCK_Data_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Retransmission
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_Data
</UL>

<P><STRONG><a name="[102]"></a>Write_W5500_1Byte</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, w5500.o(.text.Write_W5500_1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Write_W5500_1Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
</UL>

<P><STRONG><a name="[104]"></a>Write_W5500_2Byte</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, w5500.o(.text.Write_W5500_2Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Write_W5500_2Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[c8]"></a>Write_W5500_SOCK_1Byte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, w5500.o(.text.Write_W5500_SOCK_1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Write_W5500_SOCK_1Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Retransmission
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
</UL>

<P><STRONG><a name="[eb]"></a>Write_W5500_SOCK_2Byte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, w5500.o(.text.Write_W5500_SOCK_2Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Write_W5500_SOCK_2Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[c7]"></a>Write_W5500_SOCK_4Byte</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, w5500.o(.text.Write_W5500_SOCK_4Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
</UL>

<P><STRONG><a name="[103]"></a>Write_W5500_nByte</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, w5500.o(.text.Write_W5500_nByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Write_W5500_nByte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[b1]"></a>_delay_us</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ads1247.o(.text._delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADSConversionData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WREG
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_RREG
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads1247_Mode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_Init
</UL>

<P><STRONG><a name="[80]"></a>_usb_in0_transc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usbd_transc.o(.text._usb_in0_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _usb_in0_transc &rArr; usb_ctl_out
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_out
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_0len_packet_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.text.usbd_init)
</UL>
<P><STRONG><a name="[7f]"></a>_usb_out0_transc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbd_transc.o(.text._usb_out0_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _usb_out0_transc &rArr; usb_ctl_status_in
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_status_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.text.usbd_init)
</UL>
<P><STRONG><a name="[7e]"></a>_usb_setup_transc</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, usbd_transc.o(.text._usb_setup_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _usb_setup_transc &rArr; usb_ctl_data_in &rArr; usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stall_transc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_status_in
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_out
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_data_in
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_vendor_request
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.text.usbd_init)
</UL>
<P><STRONG><a name="[aa]"></a>adc_calibration_enable</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, gd32e50x_adc.o(.text.adc_calibration_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_calibration_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[a3]"></a>adc_channel_length_config</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gd32e50x_adc.o(.text.adc_channel_length_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[a1]"></a>adc_data_alignment_config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32e50x_adc.o(.text.adc_data_alignment_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_data_alignment_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[9f]"></a>adc_deinit</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, gd32e50x_adc.o(.text.adc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adc_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[a8]"></a>adc_enable</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, gd32e50x_adc.o(.text.adc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[a6]"></a>adc_external_trigger_config</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, gd32e50x_adc.o(.text.adc_external_trigger_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_external_trigger_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[a5]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gd32e50x_adc.o(.text.adc_external_trigger_source_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_external_trigger_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[a4]"></a>adc_inserted_channel_config</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, gd32e50x_adc.o(.text.adc_inserted_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_inserted_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[a2]"></a>adc_mode_config</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, gd32e50x_adc.o(.text.adc_mode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_mode_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[bc]"></a>adc_software_trigger_enable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gd32e50x_adc.o(.text.adc_software_trigger_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_software_trigger_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_software_trigger
</UL>

<P><STRONG><a name="[a0]"></a>adc_special_function_config</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, gd32e50x_adc.o(.text.adc_special_function_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_special_function_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[a7]"></a>adc_tempsensor_vrefint_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e50x_adc.o(.text.adc_tempsensor_vrefint_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[d9]"></a>ads1247_calibrate</STRONG> (Thumb, 378 bytes, Stack size 104 bytes, comm_process.o(.text.ads1247_calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = ads1247_calibrate &rArr; WriteParametersADS1247 &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersADS1247
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads1247_Mode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AI_Data
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Channel_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
</UL>

<P><STRONG><a name="[124]"></a>can1_filter_start_bank</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, gd32e50x_can.o(.text.can1_filter_start_bank))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can1_filter_start_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[120]"></a>can_config</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, can_bus.o(.text.can_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = can_config &rArr; can_filter_mask_mode_init &rArr; can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_mask_mode_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_filter_start_bank
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>can_deinit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, gd32e50x_can.o(.text.can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = can_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[12d]"></a>can_error_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e50x_can.o(.text.can_error_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_error_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get
</UL>

<P><STRONG><a name="[129]"></a>can_filter_init</STRONG> (Thumb, 310 bytes, Stack size 12 bytes, gd32e50x_can.o(.text.can_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_mask_mode_init
</UL>

<P><STRONG><a name="[125]"></a>can_filter_mask_mode_init</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, gd32e50x_can.o(.text.can_filter_mask_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = can_filter_mask_mode_init &rArr; can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[12a]"></a>can_gpio_config</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gd32e503v_eval.o(.text.can_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>can_init</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, gd32e50x_can.o(.text.can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[128]"></a>can_interrupt_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e50x_can.o(.text.can_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[fe]"></a>can_interrupt_flag_get</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, gd32e50x_can.o(.text.can_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = can_interrupt_flag_get &rArr; can_receive_message_length_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_message_length_get
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_get
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>can_message_receive</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, gd32e50x_can.o(.text.can_message_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_message_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>can_message_transmit</STRONG> (Thumb, 328 bytes, Stack size 20 bytes, gd32e50x_can.o(.text.can_message_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can_message_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
</UL>

<P><STRONG><a name="[12c]"></a>can_receive_message_length_get</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gd32e50x_can.o(.text.can_receive_message_length_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_receive_message_length_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get
</UL>

<P><STRONG><a name="[12e]"></a>can_send</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, can_bus.o(.text.can_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can_send &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>can_struct_para_init</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, gd32e50x_can.o(.text.can_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_mask_mode_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[158]"></a>cdc_acm_check_ready</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, cdc_acm_core.o(.text.cdc_acm_check_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cdc_acm_check_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>cdc_acm_data_receive</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cdc_acm_core.o(.text.cdc_acm_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cdc_acm_data_receive &rArr; usbd_ep_recev &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>communication_check</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, can_bus.o(.text.communication_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = communication_check &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>delay_1ms</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, systick.o(.text.delay_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Listen
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[f5]"></a>delay_decrement</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, systick.o(.text.delay_decrement))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[149]"></a>exti_init</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, gd32e50x_exti.o(.text.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
</UL>

<P><STRONG><a name="[cd]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, gd32e50x_exti.o(.text.exti_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = exti_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
</UL>

<P><STRONG><a name="[cc]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gd32e50x_exti.o(.text.exti_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exti_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>fmc_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, gd32e50x_fmc.o(.text.fmc_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
</UL>

<P><STRONG><a name="[10d]"></a>fmc_lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e50x_fmc.o(.text.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
</UL>

<P><STRONG><a name="[10b]"></a>fmc_page_erase</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gd32e50x_fmc.o(.text.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fmc_page_erase &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
</UL>

<P><STRONG><a name="[109]"></a>fmc_unlock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32e50x_fmc.o(.text.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
</UL>

<P><STRONG><a name="[10c]"></a>fmc_word_program</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gd32e50x_fmc.o(.text.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
</UL>

<P><STRONG><a name="[81]"></a>fputc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fputc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[139]"></a>gd_eval_com_init</STRONG> (Thumb, 570 bytes, Stack size 32 bytes, gd32e503v_eval.o(.text.gd_eval_com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = gd_eval_com_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_usart5_clock_config
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_afio_port_config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_overrun_disable
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>gd_eval_io_init</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, gd32e503v_eval.o(.text.gd_eval_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gd_eval_io_init &rArr; nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DO_Output_Ctrl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerWifiBle_Ctrl
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power4G_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>gpio_afio_port_config</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, gd32e50x_gpio.o(.text.gpio_afio_port_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_afio_port_config
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[b0]"></a>gpio_bit_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32e50x_gpio.o(.text.gpio_bit_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DO_Output_Ctrl
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_CS
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_nByte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_2Byte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Android_Ctrl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Channel_Select
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dp_pullup
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerWifiBle_Ctrl
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power4G_Ctrl
</UL>

<P><STRONG><a name="[b2]"></a>gpio_bit_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32e50x_gpio.o(.text.gpio_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DO_Output_Ctrl
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_CS
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_nByte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_2Byte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Android_Ctrl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Channel_Select
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dp_pullup
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerWifiBle_Ctrl
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power4G_Ctrl
</UL>

<P><STRONG><a name="[14a]"></a>gpio_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32e50x_usbd_hw.o(.text.gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>gpio_exti_source_select</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, gd32e50x_gpio.o(.text.gpio_exti_source_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_exti_source_select
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
</UL>

<P><STRONG><a name="[9c]"></a>gpio_init</STRONG> (Thumb, 388 bytes, Stack size 28 bytes, gd32e50x_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Configuration
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_IO_Init
</UL>

<P><STRONG><a name="[cb]"></a>gpio_input_bit_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32e50x_gpio.o(.text.gpio_input_bit_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SW_Input_State
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DI_Input_State
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Android_Sta
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Get_Sta
</UL>

<P><STRONG><a name="[12b]"></a>gpio_pin_remap_config</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, gd32e50x_gpio.o(.text.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
</UL>

<P><STRONG><a name="[14b]"></a>init_config_ads1247</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, cfg_flash.o(.text.init_config_ads1247))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = init_config_ads1247 &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash_CPU
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_ADS1247_Parameters
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>init_config_net</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, cfg_flash.o(.text.init_config_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = init_config_net &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash_CPU
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Net_Parameters
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>main</STRONG> (Thumb, 1558 bytes, Stack size 144 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = main &rArr; RTU_Process &rArr; Local_RTU &rArr; ads1247_calibrate &rArr; WriteParametersADS1247 &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_base_info
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_net
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_ads1247
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_check
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_receive
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_check_ready
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Socket_Set
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SW_Input_State
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DI_Input_State
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ads1247_Mode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AI_Data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTU_Process
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_Data
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Android_Sta
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Data_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Get_Sta
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com2Com
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Uart_Buffer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Android_Ctrl
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_software_trigger
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Channel_Select
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_IO_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cycle_Detect_Process
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[155]"></a>nvic_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32e50x_usbd_hw.o(.text.nvic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nvic_config &rArr; nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>nvic_irq_enable</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, gd32e50x_misc.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[126]"></a>nvic_priority_group_set</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32e50x_misc.o(.text.nvic_priority_group_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[f7]"></a>nvic_vector_table_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32e50x_misc.o(.text.nvic_vector_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_vector_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[15b]"></a>ob_data_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e50x_fmc.o(.text.ob_data_get))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_base_info
</UL>

<P><STRONG><a name="[15d]"></a>ob_security_protection_flag_get</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, gd32e50x_fmc.o(.text.ob_security_protection_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ob_security_protection_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_base_info
</UL>

<P><STRONG><a name="[15a]"></a>ob_user_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e50x_fmc.o(.text.ob_user_get))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_base_info
</UL>

<P><STRONG><a name="[15c]"></a>ob_write_protection_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e50x_fmc.o(.text.ob_write_protection_get))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_base_info
</UL>

<P><STRONG><a name="[152]"></a>print_base_info</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, gd32e503v_eval.o(.text.print_base_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = print_base_info &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_write_protection_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_user_get
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_security_protection_flag_get
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_data_get
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>rcu_adc_clock_config</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, gd32e50x_rcu.o(.text.rcu_adc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcu_adc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[159]"></a>rcu_clock_freq_get</STRONG> (Thumb, 620 bytes, Stack size 100 bytes, gd32e50x_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_base_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[153]"></a>rcu_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e50x_usbd_hw.o(.text.rcu_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcu_config &rArr; rcu_usb_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_usb_clock_config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32e50x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Configuration
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_IO_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[11e]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32e50x_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[11d]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32e50x_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[13b]"></a>rcu_usart5_clock_config</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32e50x_rcu.o(.text.rcu_usart5_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_usart5_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[15e]"></a>rcu_usb_clock_config</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32e50x_rcu.o(.text.rcu_usb_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_usb_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
</UL>

<P><STRONG><a name="[15f]"></a>serial_string_get</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, usbd_enum.o(.text.serial_string_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = serial_string_get &rArr; int_to_unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[ae]"></a>spi_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e50x_spi.o(.text.spi_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_IO_Init
</UL>

<P><STRONG><a name="[ba]"></a>spi_i2s_data_receive</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gd32e50x_spi.o(.text.spi_i2s_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WriteByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
</UL>

<P><STRONG><a name="[b9]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e50x_spi.o(.text.spi_i2s_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WriteByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
</UL>

<P><STRONG><a name="[b8]"></a>spi_i2s_flag_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32e50x_spi.o(.text.spi_i2s_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi_i2s_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WriteByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
</UL>

<P><STRONG><a name="[ad]"></a>spi_init</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, gd32e50x_spi.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_IO_Init
</UL>

<P><STRONG><a name="[150]"></a>systick_config</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, systick.o(.text.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = systick_config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>usart5_flag_get</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gd32e50x_usart.o(.text.usart5_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart5_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
</UL>

<P><STRONG><a name="[145]"></a>usart5_interrupt_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart5_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart5_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[fc]"></a>usart5_interrupt_flag_clear</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart5_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart5_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>usart5_interrupt_flag_get</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, gd32e50x_usart.o(.text.usart5_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usart5_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>usart5_overrun_disable</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32e50x_usart.o(.text.usart5_overrun_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart5_overrun_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[13e]"></a>usart_baudrate_set</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, gd32e50x_usart.o(.text.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[fa]"></a>usart_data_receive</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>usart_data_transmit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
</UL>

<P><STRONG><a name="[13d]"></a>usart_deinit</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, gd32e50x_usart.o(.text.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usart_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[144]"></a>usart_enable</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, gd32e50x_usart.o(.text.usart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[c4]"></a>usart_flag_get</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gd32e50x_usart.o(.text.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
</UL>

<P><STRONG><a name="[146]"></a>usart_interrupt_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[f9]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, gd32e50x_usart.o(.text.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>usart_parity_config</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart_parity_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_parity_config
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[142]"></a>usart_receive_config</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, gd32e50x_usart.o(.text.usart_receive_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_receive_config
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[140]"></a>usart_stop_bit_set</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart_stop_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_stop_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[143]"></a>usart_transmit_config</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, gd32e50x_usart.o(.text.usart_transmit_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_transmit_config
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[13f]"></a>usart_word_length_set</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart_word_length_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_word_length_set
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[116]"></a>usbd_class_request</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usbd_enum.o(.text.usbd_class_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_class_request
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[132]"></a>usbd_ep_recev</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, usbd_core.o(.text.usbd_ep_recev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usbd_ep_recev &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_receive
</UL>

<P><STRONG><a name="[130]"></a>usbd_ep_send</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, usbd_core.o(.text.usbd_ep_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_in
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_data_in
</UL>

<P><STRONG><a name="[154]"></a>usbd_init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usbd_init &rArr; serial_string_get &rArr; int_to_unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_string_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>usbd_isr</STRONG> (Thumb, 856 bytes, Stack size 32 bytes, usbd_lld_int.o(.text.usbd_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_isr &rArr; usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_suspend
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_mcu
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>usbd_standard_request</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_enum.o(.text.usbd_standard_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_standard_request
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[117]"></a>usbd_vendor_request</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_enum.o(.text.usbd_vendor_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_vendor_request
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[151]"></a>w5500_config</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, w5500.o(.text.w5500_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = w5500_config &rArr; nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>w5500_read_byte</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w5500.o(.text.w5500_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = w5500_read_byte &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[e9]"></a>w5500_send_byte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, w5500.o(.text.w5500_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_read_byte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_nByte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_2Byte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[e8]"></a>w5500_send_halfword</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, w5500.o(.text.w5500_send_halfword))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_nByte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_2Byte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[11f]"></a>wdt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.wdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1247_calibrate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[182]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[183]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[184]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[d1]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_base_info
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_check
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Data_Init
</UL>

<P><STRONG><a name="[185]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[186]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[187]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[156]"></a>usbd_connect</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.usbd_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, systick.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[f4]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, systick.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[d8]"></a>__NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, comm_process.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
</UL>

<P><STRONG><a name="[161]"></a>system_clock_168m_hxtal</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, system_gd32e50x.o(.text.system_clock_168m_hxtal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = system_clock_168m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[f6]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32e50x.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = system_clock_config &rArr; system_clock_168m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_168m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[137]"></a>fmc_ready_wait</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gd32e50x_fmc.o(.text.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[138]"></a>fmc_state_get</STRONG> (Thumb, 124 bytes, Stack size 4 bytes, gd32e50x_fmc.o(.text.fmc_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[18]"></a>usbd_address_set</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, usbd_lld_core.o(.text.usbd_address_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usbd_address_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[15]"></a>usbd_core_reset</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_core_reset))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[16]"></a>usbd_core_stop</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_core_stop))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[17]"></a>usbd_dp_pullup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbd_lld_core.o(.text.usbd_dp_pullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_dp_pullup &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[21]"></a>usbd_ep_data_read</STRONG> (Thumb, 320 bytes, Stack size 20 bytes, usbd_lld_core.o(.text.usbd_ep_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_ep_data_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[20]"></a>usbd_ep_data_write</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, usbd_lld_core.o(.text.usbd_ep_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_data_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[1e]"></a>usbd_ep_disable</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, usbd_lld_core.o(.text.usbd_ep_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[1c]"></a>usbd_ep_reset</STRONG> (Thumb, 228 bytes, Stack size 12 bytes, usbd_lld_core.o(.text.usbd_ep_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_ep_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[1f]"></a>usbd_ep_rx_enable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usbd_lld_core.o(.text.usbd_ep_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_rx_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[1d]"></a>usbd_ep_setup</STRONG> (Thumb, 840 bytes, Stack size 24 bytes, usbd_lld_core.o(.text.usbd_ep_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[23]"></a>usbd_ep_stall_clear</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, usbd_lld_core.o(.text.usbd_ep_stall_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_stall_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[22]"></a>usbd_ep_stall_set</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, usbd_lld_core.o(.text.usbd_ep_stall_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_stall_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[24]"></a>usbd_ep_status</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_lld_core.o(.text.usbd_ep_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[1a]"></a>usbd_leave_suspend</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_leave_suspend))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[1b]"></a>usbd_resume</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, usbd_lld_core.o(.text.usbd_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usbd_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[19]"></a>usbd_suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_suspend))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[166]"></a>resume_mcu</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_lld_int.o(.text.resume_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = resume_mcu
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[164]"></a>usbd_int_suspend</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_lld_int.o(.text.usbd_int_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_int_suspend &rArr; usbd_to_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_to_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[165]"></a>usbd_to_suspend</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_lld_int.o(.text.usbd_to_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_to_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_suspend
</UL>

<P><STRONG><a name="[163]"></a>usb_transc_config</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usbd_core.o(.text.usb_transc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>

<P><STRONG><a name="[11b]"></a>_usb_bos_desc_get</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_bos_desc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_bos_desc_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getdescriptor
</UL>

<P><STRONG><a name="[13]"></a>_usb_config_desc_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, usbd_enum.o(.text._usb_config_desc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _usb_config_desc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data.std_desc_get)
</UL>
<P><STRONG><a name="[12]"></a>_usb_dev_desc_get</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, usbd_enum.o(.text._usb_dev_desc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _usb_dev_desc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data.std_desc_get)
</UL>
<P><STRONG><a name="[1]"></a>_usb_std_clearfeature</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, usbd_enum.o(.text._usb_std_clearfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _usb_std_clearfeature &rArr; usbd_ep_clear_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear_stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[7]"></a>_usb_std_getconfiguration</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usbd_enum.o(.text._usb_std_getconfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _usb_std_getconfiguration &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[5]"></a>_usb_std_getdescriptor</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, usbd_enum.o(.text._usb_std_getdescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _usb_std_getdescriptor &rArr; _usb_bos_desc_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_bos_desc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[9]"></a>_usb_std_getinterface</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, usbd_enum.o(.text._usb_std_getinterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _usb_std_getinterface &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[0]"></a>_usb_std_getstatus</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, usbd_enum.o(.text._usb_std_getstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _usb_std_getstatus &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[2]"></a>_usb_std_reserved</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_reserved))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _usb_std_reserved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[4]"></a>_usb_std_setaddress</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, usbd_enum.o(.text._usb_std_setaddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _usb_std_setaddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[8]"></a>_usb_std_setconfiguration</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, usbd_enum.o(.text._usb_std_setconfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _usb_std_setconfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[6]"></a>_usb_std_setdescriptor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_setdescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _usb_std_setdescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[3]"></a>_usb_std_setfeature</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, usbd_enum.o(.text._usb_std_setfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _usb_std_setfeature &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[a]"></a>_usb_std_setinterface</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_std_setinterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_std_setinterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[b]"></a>_usb_std_synchframe</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_synchframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _usb_std_synchframe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[14]"></a>_usb_str_desc_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_str_desc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_str_desc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data.std_desc_get)
</UL>
<P><STRONG><a name="[160]"></a>int_to_unicode</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, usbd_enum.o(.text.int_to_unicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_string_get
</UL>

<P><STRONG><a name="[11a]"></a>usb_transc_config</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usbd_enum.o(.text.usb_transc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getstatus
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getinterface
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getconfiguration
</UL>

<P><STRONG><a name="[119]"></a>usbd_ep_clear_stall</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_enum.o(.text.usbd_ep_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_clearfeature
</UL>

<P><STRONG><a name="[11c]"></a>usbd_ep_stall</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_enum.o(.text.usbd_ep_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_setfeature
</UL>

<P><STRONG><a name="[110]"></a>usb_0len_packet_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usbd_transc.o(.text.usb_0len_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_0len_packet_send
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_in0_transc
</UL>

<P><STRONG><a name="[118]"></a>usb_ctl_data_in</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_transc.o(.text.usb_ctl_data_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usb_ctl_data_in &rArr; usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[111]"></a>usb_ctl_out</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_transc.o(.text.usb_ctl_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_ctl_out
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_in0_transc
</UL>

<P><STRONG><a name="[113]"></a>usb_ctl_status_in</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usbd_transc.o(.text.usb_ctl_status_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_ctl_status_in
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_out0_transc
</UL>

<P><STRONG><a name="[114]"></a>usb_stall_transc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_transc.o(.text.usb_stall_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_stall_transc &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[112]"></a>usb_transc_config</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usbd_transc.o(.text.usb_transc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_out0_transc
</UL>

<P><STRONG><a name="[162]"></a>usbd_ep_stall</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_transc.o(.text.usbd_ep_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stall_transc
</UL>

<P><STRONG><a name="[f]"></a>cdc_acm_ctlx_out</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cdc_acm_core.o(.text.cdc_acm_ctlx_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cdc_acm_ctlx_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[10]"></a>cdc_acm_data_in</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cdc_acm_core.o(.text.cdc_acm_data_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = cdc_acm_data_in &rArr; usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[11]"></a>cdc_acm_data_out</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, cdc_acm_core.o(.text.cdc_acm_data_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cdc_acm_data_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[d]"></a>cdc_acm_deinit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cdc_acm_core.o(.text.cdc_acm_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cdc_acm_deinit &rArr; usbd_ep_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[c]"></a>cdc_acm_init</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, cdc_acm_core.o(.text.cdc_acm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cdc_acm_init &rArr; usbd_ep_init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[e]"></a>cdc_acm_req_handler</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cdc_acm_core.o(.text.cdc_acm_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cdc_acm_req_handler &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[135]"></a>usb_transc_config</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, cdc_acm_core.o(.text.usb_transc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_req_handler
</UL>

<P><STRONG><a name="[133]"></a>usbd_ep_deinit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cdc_acm_core.o(.text.usbd_ep_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_deinit
</UL>

<P><STRONG><a name="[134]"></a>usbd_ep_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, cdc_acm_core.o(.text.usbd_ep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
</UL>

<P><STRONG><a name="[169]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[168]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[16c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16b]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
