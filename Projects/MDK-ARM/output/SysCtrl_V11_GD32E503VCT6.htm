<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\SysCtrl_V11_GD32E503VCT6.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\SysCtrl_V11_GD32E503VCT6.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Thu Dec 28 12:52:39 2023
<BR><P>
<H3>Maximum Stack Usage =       4216 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Main_Task &rArr; G4_Task &rArr; MQTT_Run &rArr; MQTT_PUBLISH &rArr; get_pvt_para &rArr; atoi &rArr; strtol &rArr; _strtoul
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[53]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">ADC0_1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[53]">ADC0_1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[70]">ADC2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3b]">BusFault_Handler</a> from gd32e50x_it.o(.text.BusFault_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[57]">CAN0_EWMC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[56]">CAN0_RX1_IRQHandler</a> from gd32e50x_it.o(.text.CAN0_RX1_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[80]">CAN1_EWMC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[7e]">CAN1_RX0_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[7f]">CAN1_RX1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[7d]">CAN1_TX_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4c]">DMA0_Channel0_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4d]">DMA0_Channel1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4e]">DMA0_Channel2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4f]">DMA0_Channel3_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[50]">DMA0_Channel4_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[51]">DMA0_Channel5_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[52]">DMA0_Channel6_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[79]">DMA1_Channel0_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[7a]">DMA1_Channel1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[7b]">DMA1_Channel2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[7c]">DMA1_Channel3_4_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3e]">DebugMon_Handler</a> from gd32e50x_it.o(.text.DebugMon_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[71]">EXMC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[47]">EXTI0_IRQHandler</a> from gd32e50x_it.o(.text.EXTI0_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[69]">EXTI10_15_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[48]">EXTI1_IRQHandler</a> from gd32e50x_it.o(.text.EXTI1_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[49]">EXTI2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4a]">EXTI3_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[4b]">EXTI4_IRQHandler</a> from gd32e50x_it.o(.text.EXTI4_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[58]">EXTI5_9_IRQHandler</a> from ch432t.o(.text.EXTI5_9_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[45]">FMC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[39]">HardFault_Handler</a> from gd32e50x_it.o(.text.HardFault_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[61]">I2C0_ER_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[60]">I2C0_EV_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[63]">I2C1_ER_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[62]">I2C1_EV_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[89]">I2C2_ER_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[88]">I2C2_EV_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[8b]">I2C2_WKUP_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[42]">LVD_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3a]">MemManage_Handler</a> from gd32e50x_it.o(.text.MemManage_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[38]">NMI_Handler</a> from gd32e50x_it.o(.text.NMI_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3f]">PendSV_Handler</a> from portasm.o(.text.PendSV_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[46]">RCU_CTC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6a]">RTC_Alarm_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[44]">RTC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[37]">Reset_Handler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[72]">SDIO_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[86]">SHRTIMER_IRQ0_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[87]">SHRTIMER_IRQ1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[81]">SHRTIMER_IRQ2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[82]">SHRTIMER_IRQ3_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[83]">SHRTIMER_IRQ4_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[84]">SHRTIMER_IRQ5_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[85]">SHRTIMER_IRQ6_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[64]">SPI0_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[65]">SPI1_I2S1ADD_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[74]">SPI2_I2S2ADD_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3d]">SVC_Handler</a> from portasm.o(.text.SVC_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[40]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[8e]">SystemInit</a> from system_gd32e50x.o(.text.SystemInit) referenced from startup_gd32e50x_hd.o(.text)
 <LI><a href="#[43]">TAMPER_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[59]">TIMER0_BRK_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5c]">TIMER0_Channel_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5b]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5a]">TIMER0_UP_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5d]">TIMER1_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5e]">TIMER2_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[5f]">TIMER3_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[73]">TIMER4_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[77]">TIMER5_DAC_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[78]">TIMER6_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6c]">TIMER7_BRK_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6f]">TIMER7_Channel_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6e]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6d]">TIMER7_UP_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[75]">UART3_IRQHandler</a> from gd32e50x_it.o(.text.UART3_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[76]">UART4_IRQHandler</a> from gd32e50x_it.o(.text.UART4_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[66]">USART0_IRQHandler</a> from gd32e50x_it.o(.text.USART0_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[67]">USART1_IRQHandler</a> from gd32e50x_it.o(.text.USART1_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[68]">USART2_IRQHandler</a> from gd32e50x_it.o(.text.USART2_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[8a]">USART5_IRQHandler</a> from gd32e50x_it.o(.text.USART5_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[8c]">USART5_WKUP_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[54]">USBD_HP_CAN0_TX_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[55]">USBD_LP_CAN0_RX0_IRQHandler</a> from gd32e50x_it.o(.text.USBD_LP_CAN0_RX0_IRQHandler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[6b]">USBD_WKUP_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[3c]">UsageFault_Handler</a> from gd32e50x_it.o(.text.UsageFault_Handler) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[41]">WWDGT_IRQHandler</a> from startup_gd32e50x_hd.o(.text) referenced from startup_gd32e50x_hd.o(RESET)
 <LI><a href="#[8f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32e50x_hd.o(.text)
 <LI><a href="#[95]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[25]">_usb_config_desc_get</a> from usbd_enum.o(.text._usb_config_desc_get) referenced 2 times from usbd_enum.o(.data.std_desc_get)
 <LI><a href="#[24]">_usb_dev_desc_get</a> from usbd_enum.o(.text._usb_dev_desc_get) referenced 2 times from usbd_enum.o(.data.std_desc_get)
 <LI><a href="#[93]">_usb_in0_transc</a> from usbd_transc.o(.text._usb_in0_transc) referenced 2 times from usbd_core.o(.text.usbd_init)
 <LI><a href="#[92]">_usb_out0_transc</a> from usbd_transc.o(.text._usb_out0_transc) referenced 2 times from usbd_core.o(.text.usbd_init)
 <LI><a href="#[91]">_usb_setup_transc</a> from usbd_transc.o(.text._usb_setup_transc) referenced 2 times from usbd_core.o(.text.usbd_init)
 <LI><a href="#[1]">_usb_std_clearfeature</a> from usbd_enum.o(.text._usb_std_clearfeature) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[7]">_usb_std_getconfiguration</a> from usbd_enum.o(.text._usb_std_getconfiguration) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[5]">_usb_std_getdescriptor</a> from usbd_enum.o(.text._usb_std_getdescriptor) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[9]">_usb_std_getinterface</a> from usbd_enum.o(.text._usb_std_getinterface) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[0]">_usb_std_getstatus</a> from usbd_enum.o(.text._usb_std_getstatus) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[2]">_usb_std_reserved</a> from usbd_enum.o(.text._usb_std_reserved) referenced 4 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[4]">_usb_std_setaddress</a> from usbd_enum.o(.text._usb_std_setaddress) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[8]">_usb_std_setconfiguration</a> from usbd_enum.o(.text._usb_std_setconfiguration) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[6]">_usb_std_setdescriptor</a> from usbd_enum.o(.text._usb_std_setdescriptor) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[3]">_usb_std_setfeature</a> from usbd_enum.o(.text._usb_std_setfeature) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[a]">_usb_std_setinterface</a> from usbd_enum.o(.text._usb_std_setinterface) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[b]">_usb_std_synchframe</a> from usbd_enum.o(.text._usb_std_synchframe) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[26]">_usb_str_desc_get</a> from usbd_enum.o(.text._usb_str_desc_get) referenced 2 times from usbd_enum.o(.data.std_desc_get)
 <LI><a href="#[f]">cdc_acm_ctlx_out</a> from cdc_acm_core.o(.text.cdc_acm_ctlx_out) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[10]">cdc_acm_data_in</a> from cdc_acm_core.o(.text.cdc_acm_data_in) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[11]">cdc_acm_data_out</a> from cdc_acm_core.o(.text.cdc_acm_data_out) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[d]">cdc_acm_deinit</a> from cdc_acm_core.o(.text.cdc_acm_deinit) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[c]">cdc_acm_init</a> from cdc_acm_core.o(.text.cdc_acm_init) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[e]">cdc_acm_req_handler</a> from cdc_acm_core.o(.text.cdc_acm_req_handler) referenced 2 times from cdc_acm_core.o(.data.cdc_class)
 <LI><a href="#[94]">fputc</a> from main.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1b]">get12V</a> from snmpdemo.o(.text.get12V) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[19]">getAd</a> from snmpdemo.o(.text.getAd) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[18]">getAndroid_Ctrl</a> from snmpdemo.o(.text.getAndroid_Ctrl) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[1a]">getBat</a> from snmpdemo.o(.text.getBat) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[1e]">getComInfo</a> from snmpdemo.o(.text.getComInfo) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[14]">getDeviceTempe</a> from snmpdemo.o(.text.getDeviceTempe) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[17]">getDipStatus</a> from snmpdemo.o(.text.getDipStatus) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[15]">getInputStatus</a> from snmpdemo.o(.text.getInputStatus) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[1c]">getModbus_ID</a> from snmpdemo.o(.text.getModbus_ID) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[16]">getOutputStatus</a> from snmpdemo.o(.text.getOutputStatus) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[13]">getRTS</a> from snmpdemo.o(.text.getRTS) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[1d]">getRj45</a> from snmpdemo.o(.text.getRj45) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[12]">getWIZnetLed</a> from snmpdemo.o(.text.getWIZnetLed) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[8d]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[21]">setAndroid_Ctrl</a> from snmpdemo.o(.text.setAndroid_Ctrl) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[20]">setOutput_Off</a> from snmpdemo.o(.text.setOutput_Off) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[1f]">setOutput_On</a> from snmpdemo.o(.text.setOutput_On) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[23]">setRj45_MAC</a> from snmpdemo.o(.text.setRj45_MAC) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[22]">setWIZnetLed</a> from snmpdemo.o(.text.setWIZnetLed) referenced 2 times from snmpdemo.o(.data.snmpData)
 <LI><a href="#[2a]">usbd_address_set</a> from usbd_lld_core.o(.text.usbd_address_set) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[27]">usbd_core_reset</a> from usbd_lld_core.o(.text.usbd_core_reset) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[28]">usbd_core_stop</a> from usbd_lld_core.o(.text.usbd_core_stop) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[29]">usbd_dp_pullup</a> from usbd_lld_core.o(.text.usbd_dp_pullup) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[33]">usbd_ep_data_read</a> from usbd_lld_core.o(.text.usbd_ep_data_read) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[32]">usbd_ep_data_write</a> from usbd_lld_core.o(.text.usbd_ep_data_write) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[30]">usbd_ep_disable</a> from usbd_lld_core.o(.text.usbd_ep_disable) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[2e]">usbd_ep_reset</a> from usbd_lld_core.o(.text.usbd_ep_reset) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[31]">usbd_ep_rx_enable</a> from usbd_lld_core.o(.text.usbd_ep_rx_enable) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[2f]">usbd_ep_setup</a> from usbd_lld_core.o(.text.usbd_ep_setup) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[35]">usbd_ep_stall_clear</a> from usbd_lld_core.o(.text.usbd_ep_stall_clear) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[34]">usbd_ep_stall_set</a> from usbd_lld_core.o(.text.usbd_ep_stall_set) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[36]">usbd_ep_status</a> from usbd_lld_core.o(.text.usbd_ep_status) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[2c]">usbd_leave_suspend</a> from usbd_lld_core.o(.text.usbd_leave_suspend) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[2d]">usbd_resume</a> from usbd_lld_core.o(.text.usbd_resume) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[2b]">usbd_suspend</a> from usbd_lld_core.o(.text.usbd_suspend) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[90]">vPortSVCHandler_C</a> from port.o(.text.vPortSVCHandler_C) referenced from portasm.o(.text.SVC_Handler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(.text)
</UL>
<P><STRONG><a name="[268]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[97]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[269]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[26a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[26b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[26c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[26d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[37]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26e]"></a>MSR_MSP2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DMA1_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>I2C2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>SHRTIMER_IRQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>SHRTIMER_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SHRTIMER_IRQ2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>SHRTIMER_IRQ3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SHRTIMER_IRQ4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>SHRTIMER_IRQ5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>SHRTIMER_IRQ6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPI1_I2S1ADD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SPI2_I2S2ADD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>USART5_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e50x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpCode
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_data_modbus6_com
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pvt_para
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pvt_para
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_rev_data
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitW5500Data
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZ_Uart_Get_Data
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpecData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSsid
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgWifiPara
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Publish_Pl_One_Par_Item_Data
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVersion
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVarBind
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequenceOf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequence
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSNMPMessage
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseRequest
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseCommunity
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Rj45_Param
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetICCID
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSThread
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dailer
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
</UL>

<P><STRONG><a name="[26f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[270]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZ_Uart_Get_Data
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSsid
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe_WB
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Rj45_Param
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe
</UL>

<P><STRONG><a name="[237]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_net
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_ads1247
</UL>

<P><STRONG><a name="[272]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[fd]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZ_Uart_Get_Data
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgWifiPara
</UL>

<P><STRONG><a name="[10b]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpecData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe_WB
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResult
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDisConn
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetREG
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIMSI
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetICCID
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCSQ
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOPS
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe
</UL>

<P><STRONG><a name="[108]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pvt_para
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZ_Uart_Get_Data
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpecData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiBleCmdSend
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Run
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Publish_Pl_One_Par_Item_Data
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEntry
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package2
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe
</UL>

<P><STRONG><a name="[17c]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_receive
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
</UL>

<P><STRONG><a name="[225]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseCommunity
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findEntry
</UL>

<P><STRONG><a name="[fc]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgWifiPara
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIMSI
</UL>

<P><STRONG><a name="[9c]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pvt_para
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToIp
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWifiMode
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTdInfo
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSsid
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRssi
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDhcp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgWifiPara
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_float
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_rev_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Tran
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Calc
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_rev_data
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTH_SHT3X
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Tran
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Calc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pvt_para
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_float
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_rev_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_device_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Tran
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBat
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get12V
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_dcmple</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Tran
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Calc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pvt_para
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_rev_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Tran
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBat
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get12V
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Tran
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTH_SHT3X
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Tran
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Tran
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_float
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_device_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTH_SHT3X
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Tran
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBat
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAd
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get12V
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Calc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pvt_para
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_float
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_rev_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_device_info
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Tran
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBat
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get12V
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
</UL>

<P><STRONG><a name="[273]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[274]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[275]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[276]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[277]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[278]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a2]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[264]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[98]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[279]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[b1]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[27a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>ADC_Cycle_Detect_Process</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ad_process.o(.text.ADC_Cycle_Detect_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ADC_Cycle_Detect_Process &rArr; V_Calc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[b7]"></a>ADC_GPIO_Configuration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ad_process.o(.text.ADC_GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_GPIO_Configuration &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[ba]"></a>ADC_Inititile</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ad_process.o(.text.ADC_Inititile))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ADC_Inititile &rArr; adc_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_tempsensor_vrefint_enable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mode_config
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_inserted_channel_config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Configuration
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_software_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c8]"></a>ADS1247_IO_Init</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ads1247.o(.text.ADS1247_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ADS1247_IO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[cb]"></a>ADS1247_Init</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, ads1247.o(.text.ADS1247_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ADS1247_Init &rArr; ADS_WREG &rArr; ADS_WriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WREG
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_RREG
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_CS
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[cf]"></a>ADS_CS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ads1247.o(.text.ADS_CS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADS_CS &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADSConversionData
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WREG
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_RREG
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_Init
</UL>

<P><STRONG><a name="[d0]"></a>ADS_RREG</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ads1247.o(.text.ADS_RREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADS_RREG &rArr; ADS_ReadByte &rArr; ADS_WriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WriteByte
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_ReadByte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_Init
</UL>

<P><STRONG><a name="[d3]"></a>ADS_ReadByte</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ads1247.o(.text.ADS_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADS_ReadByte &rArr; ADS_WriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADSConversionData
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_RREG
</UL>

<P><STRONG><a name="[d1]"></a>ADS_WREG</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ads1247.o(.text.ADS_WREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADS_WREG &rArr; ADS_WriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WriteByte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_Init
</UL>

<P><STRONG><a name="[d2]"></a>ADS_WriteByte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ads1247.o(.text.ADS_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADS_WriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WREG
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_ReadByte
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_RREG
</UL>

<P><STRONG><a name="[1b5]"></a>ADT</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, ads1247.o(.text.ADT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADT
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AI_Data
</UL>

<P><STRONG><a name="[d7]"></a>AI_Channel_Select</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, gd32e503v_eval.o(.text.AI_Channel_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AI_Channel_Select &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>Ad_software_trigger</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ad_process.o(.text.Ad_software_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ad_software_trigger &rArr; adc_software_trigger_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[173]"></a>Android_Ctrl</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gd32e503v_eval.o(.text.Android_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Android_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAndroid_Ctrl
</UL>

<P><STRONG><a name="[d9]"></a>Ascii2_To_Hex1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, comm_process.o(.text.Ascii2_To_Hex1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Ascii2_To_Hex1 &rArr; Ascii_Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ascii_Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_rev_data
</UL>

<P><STRONG><a name="[db]"></a>Ascii4_To_Hex2</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, comm_process.o(.text.Ascii4_To_Hex2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Ascii4_To_Hex2 &rArr; Ascii_Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ascii_Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_rev_data
</UL>

<P><STRONG><a name="[da]"></a>Ascii_Hex</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, comm_process.o(.text.Ascii_Hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Ascii_Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ascii4_To_Hex2
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ascii2_To_Hex1
</UL>

<P><STRONG><a name="[19c]"></a>BCD_To_Dec</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, mqtt.o(.text.BCD_To_Dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BCD_To_Dec
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
</UL>

<P><STRONG><a name="[dc]"></a>BSP_Init</STRONG> (Thumb, 684 bytes, Stack size 40 bytes, main.o(.text.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = BSP_Init &rArr; FLASH_Data_Init &rArr; SPI_FLASH_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_net
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_ads1247
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGPRS
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SW_Input_State
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashWifi
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Data_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Channel_Select
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_IO_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>BackMotor_Ctrl</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, main.o(.text.BackMotor_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = BackMotor_Ctrl &rArr; GenCtrl &rArr; uart_set_data_modbus16 &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVLoadCurrentTime
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HighLowVolCurrentTime
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenWorkingCurrentTime
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[e3]"></a>Beep</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.Beep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Beep &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[3b]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.CAN0_RX1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>CH432SerilRcv</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, ch432t.o(.text.CH432SerilRcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH432SerilRcv &rArr; ReadCH432Data &rArr; ch432t_CS &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCH432Data
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH432_Int_Process
</UL>

<P><STRONG><a name="[f3]"></a>CH432UARTSend</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ch432t.o(.text.CH432UARTSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CH432UARTSend &rArr; WriteCH432Block &rArr; ch432t_CS &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCH432Block
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCH432Data
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
</UL>

<P><STRONG><a name="[f5]"></a>CH432_Int_Process</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, ch432t.o(.text.CH432_Int_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CH432_Int_Process &rArr; CH432SerilRcv &rArr; ReadCH432Data &rArr; ch432t_CS &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCH432Data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH432SerilRcv
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>CfgWifiPara</STRONG> (Thumb, 1266 bytes, Stack size 328 bytes, wifi_ble.o(.text.CfgWifiPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = CfgWifiPara &rArr; ExitPassthroughMode &rArr; CmdExe_WB &rArr; WifiBleCmdSend &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpecData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSsid
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitPassthroughMode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe_WB
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strIP2ip
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Rj45_Param
</UL>

<P><STRONG><a name="[101]"></a>CheckMG323Status</STRONG> (Thumb, 844 bytes, Stack size 24 bytes, gprs.o(.text.CheckMG323Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = CheckMG323Status &rArr; CmdExe &rArr; InsertLog &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGPRS
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetREG
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIMSI
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetICCID
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCSQ
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOPS
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Soft_OK
</UL>

<P><STRONG><a name="[12a]"></a>CheckSum_Cal</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, comm_process.o(.text.CheckSum_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckSum_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_rev_data
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZ_Uart_Get_Data
</UL>

<P><STRONG><a name="[196]"></a>Clear_Uart_Buffer</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, comm_process.o(.text.Clear_Uart_Buffer))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[102]"></a>CmdExe</STRONG> (Thumb, 1424 bytes, Stack size 352 bytes, gprs.o(.text.CmdExe))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = CmdExe &rArr; InsertLog &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDisconn
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSThread
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dailer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMG323Status
</UL>

<P><STRONG><a name="[f8]"></a>CmdExe_WB</STRONG> (Thumb, 622 bytes, Stack size 320 bytes, wifi_ble.o(.text.CmdExe_WB))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = CmdExe_WB &rArr; WifiBleCmdSend &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiBleCmdSend
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiMode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWifiPara
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitPassthroughMode
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgWifiPara
</UL>

<P><STRONG><a name="[10d]"></a>Com1_Boot</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, comm_process.o(.text.Com1_Boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Com1_Boot
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_system_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[10f]"></a>Com2Com</STRONG> (Thumb, 1326 bytes, Stack size 16 bytes, comm_process.o(.text.Com2Com))
<BR><BR>[Stack]<UL><LI>Max Depth = 2484<LI>Call Chain = Com2Com &rArr; Mqtt_Rece_Proces &rArr; set_pvt_para &rArr; WriteConfigParaFromIICAll &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Rev_Timeout
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[110]"></a>Com_Rev_Timeout</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, comm_process.o(.text.Com_Rev_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Com_Rev_Timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com2Com
</UL>

<P><STRONG><a name="[109]"></a>Com_Send</STRONG> (Thumb, 720 bytes, Stack size 32 bytes, gd32e503v_eval.o(.text.Com_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_receive
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_check_ready
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH432UARTSend
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_flag_get
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_data_modbus6_com
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Modbus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Retransmission
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZ_Uart_Get_Data
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiBleCmdSend
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_data_modbus16
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherNet_Tran2Com
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com2Com
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe
</UL>

<P><STRONG><a name="[11a]"></a>ConfigDataDeal</STRONG> (Thumb, 5004 bytes, Stack size 120 bytes, usb_para.o(.text.ConfigDataDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ConfigDataDeal &rArr; PCF_setsystime &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_system_reset
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_setsystime
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp_
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putStr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToInt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatstrToUint
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConfig
</UL>

<P><STRONG><a name="[123]"></a>ConfigDataDeal2</STRONG> (Thumb, 658 bytes, Stack size 40 bytes, usb_para.o(.text.ConfigDataDeal2))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ConfigDataDeal2 &rArr; strtomac &rArr; GetHex
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtomac
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoip
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp_
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConfig
</UL>

<P><STRONG><a name="[16f]"></a>CrcCheck</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.CrcCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CrcCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_data_modbus6_com
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_rev_data
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Modbus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_data_modbus16
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
</UL>

<P><STRONG><a name="[126]"></a>DO_Output_Ctrl</STRONG> (Thumb, 510 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.DO_Output_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DO_Output_Ctrl &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Ctrl_Relay
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setOutput_On
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setOutput_Off
</UL>

<P><STRONG><a name="[127]"></a>DZ_Uart_Get_Data</STRONG> (Thumb, 1134 bytes, Stack size 144 bytes, comm_process.o(.text.DZ_Uart_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = DZ_Uart_Get_Data &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Length_Cal
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex1_To_Ascii2
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum_Cal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_device_info
</UL>

<P><STRONG><a name="[12b]"></a>Dailer</STRONG> (Thumb, 402 bytes, Stack size 168 bytes, gprs.o(.text.Dailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = Dailer &rArr; CmdExe &rArr; InsertLog &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSThread
</UL>

<P><STRONG><a name="[12c]"></a>Dailer_Pre</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, gprs.o(.text.Dailer_Pre))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = Dailer_Pre &rArr; GPRS_Soft_OK &rArr; CheckMG323Status &rArr; CmdExe &rArr; InsertLog &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Soft_OK
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSThread
</UL>

<P><STRONG><a name="[19a]"></a>DataCompare</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, comm_process.o(.text.DataCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DataCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
</UL>

<P><STRONG><a name="[12e]"></a>Data_Tran</STRONG> (Thumb, 4608 bytes, Stack size 416 bytes, main.o(.text.Data_Tran))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Data_Tran &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[3e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[160]"></a>DelayMicroSeconds</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, i2c_hal.o(.text.DelayMicroSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DelayMicroSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WaitWhileClockStreching
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiPolling
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WriteByte
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StopCondition
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartCondition
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_ReadByte
</UL>

<P><STRONG><a name="[131]"></a>Detect_Gateway</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, w5500.o(.text.Detect_Gateway))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Detect_Gateway &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
</UL>

<P><STRONG><a name="[135]"></a>Do_Get_Sta</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.Do_Get_Sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Do_Get_Sta &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[47]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_IRQHandler &rArr; exti_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI1_IRQHandler &rArr; exti_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_IRQHandler &rArr; exti_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, ch432t.o(.text.EXTI5_9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EXTI5_9_IRQHandler &rArr; CH432_Int_Process &rArr; CH432SerilRcv &rArr; ReadCH432Data &rArr; ch432t_CS &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AI_Data
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH432_Int_Process
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Channel_Select
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1ea]"></a>EnterCritical</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cfg_flash.o(.text.EnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
</UL>

<P><STRONG><a name="[13a]"></a>EtherNet_P</STRONG> (Thumb, 540 bytes, Stack size 16 bytes, main.o(.text.EtherNet_P))
<BR><BR>[Stack]<UL><LI>Max Depth = 4080<LI>Call Chain = EtherNet_P &rArr; MQTT_Run &rArr; MQTT_PUBLISH &rArr; get_pvt_para &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Socket_Set
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnmpXDaemon
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_Data
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Run
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherNet_Tran2Com
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[140]"></a>EtherNet_Tran2Com</STRONG> (Thumb, 356 bytes, Stack size 1048 bytes, main.o(.text.EtherNet_Tran2Com))
<BR><BR>[Stack]<UL><LI>Max Depth = 1180<LI>Call Chain = EtherNet_Tran2Com &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sw_timeout
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherNet_P
</UL>

<P><STRONG><a name="[f9]"></a>ExitPassthroughMode</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wifi_ble.o(.text.ExitPassthroughMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = ExitPassthroughMode &rArr; CmdExe_WB &rArr; WifiBleCmdSend &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe_WB
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWifiPara
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgWifiPara
</UL>

<P><STRONG><a name="[e6]"></a>FLASH_Data_Init</STRONG> (Thumb, 112 bytes, Stack size 144 bytes, main.o(.text.FLASH_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = FLASH_Data_Init &rArr; SPI_FLASH_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[11d]"></a>FloatstrToUint</STRONG> (Thumb, 738 bytes, Stack size 32 bytes, usb_para.o(.text.FloatstrToUint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FloatstrToUint
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
</UL>

<P><STRONG><a name="[147]"></a>G4_Task</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, gprs.o(.text.G4_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 4080<LI>Call Chain = G4_Task &rArr; MQTT_Run &rArr; MQTT_PUBLISH &rArr; get_pvt_para &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Run
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDisConn
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSThread
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[149]"></a>GPRSThread</STRONG> (Thumb, 956 bytes, Stack size 72 bytes, gprs.o(.text.GPRSThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = GPRSThread &rArr; Dailer &rArr; CmdExe &rArr; InsertLog &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGPRS
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResult
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dailer_Pre
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dailer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G4_Task
</UL>

<P><STRONG><a name="[14b]"></a>GPRS_Reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32e503v_eval.o(.text.GPRS_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPRS_Reset &rArr; Gprs_Para_Init &rArr; Led_Ctrl &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Para_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power4G_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGPRS
</UL>

<P><STRONG><a name="[12d]"></a>GPRS_Soft_OK</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gprs.o(.text.GPRS_Soft_OK))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = GPRS_Soft_OK &rArr; CheckMG323Status &rArr; CmdExe &rArr; InsertLog &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMG323Status
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dailer_Pre
</UL>

<P><STRONG><a name="[f0]"></a>GenCtrl</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, main.o(.text.GenCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = GenCtrl &rArr; uart_set_data_modbus16 &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_data_modbus16
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackMotor_Ctrl
</UL>

<P><STRONG><a name="[ed]"></a>GenWorkingCurrentTime</STRONG> (Thumb, 164 bytes, Stack size 4 bytes, main.o(.text.GenWorkingCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GenWorkingCurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackMotor_Ctrl
</UL>

<P><STRONG><a name="[106]"></a>GetCOPS</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, gprs.o(.text.GetCOPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetCOPS &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMG323Status
</UL>

<P><STRONG><a name="[103]"></a>GetCSQ</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, gprs.o(.text.GetCSQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetCSQ &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMG323Status
</UL>

<P><STRONG><a name="[179]"></a>GetDataFixedHead</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, mqtt.o(.text.GetDataFixedHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetDataFixedHead
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
</UL>

<P><STRONG><a name="[14f]"></a>GetDhcp</STRONG> (Thumb, 108 bytes, Stack size 168 bytes, wifi_ble.o(.text.GetDhcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GetDhcp &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpecData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWifiPara
</UL>

<P><STRONG><a name="[253]"></a>GetHex</STRONG> (Thumb, 252 bytes, Stack size 4 bytes, usb_para.o(.text.GetHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetHex
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtomac
</UL>

<P><STRONG><a name="[105]"></a>GetICCID</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, gprs.o(.text.GetICCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GetICCID &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMG323Status
</UL>

<P><STRONG><a name="[104]"></a>GetIMSI</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, gprs.o(.text.GetIMSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetIMSI &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMG323Status
</UL>

<P><STRONG><a name="[150]"></a>GetNIP</STRONG> (Thumb, 92 bytes, Stack size 192 bytes, wifi_ble.o(.text.GetNIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GetNIP &rArr; ToIp &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpecData
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToIp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWifiPara
</UL>

<P><STRONG><a name="[107]"></a>GetREG</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, gprs.o(.text.GetREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GetREG &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMG323Status
</UL>

<P><STRONG><a name="[152]"></a>GetRssi</STRONG> (Thumb, 144 bytes, Stack size 152 bytes, wifi_ble.o(.text.GetRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GetRssi &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpecData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWifiPara
</UL>

<P><STRONG><a name="[ff]"></a>GetSsid</STRONG> (Thumb, 222 bytes, Stack size 176 bytes, wifi_ble.o(.text.GetSsid))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GetSsid &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpecData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWifiPara
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgWifiPara
</UL>

<P><STRONG><a name="[153]"></a>GetTH_SHT3X</STRONG> (Thumb, 424 bytes, Stack size 72 bytes, main.o(.text.GetTH_SHT3X))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GetTH_SHT3X &rArr; SHT3X_GetTempAndHumi &rArr; SHT3X_GetTempAndHumiPolling &rArr; SHT3X_Read2BytesAndCrc &rArr; SHT3X_CheckCrc &rArr; SHT3X_CalcCrc &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumi
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[156]"></a>GetTdInfo</STRONG> (Thumb, 478 bytes, Stack size 168 bytes, wifi_ble.o(.text.GetTdInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GetTdInfo &rArr; ToIp &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpecData
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToIp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWifiPara
</UL>

<P><STRONG><a name="[157]"></a>GetWifiMac</STRONG> (Thumb, 492 bytes, Stack size 152 bytes, wifi_ble.o(.text.GetWifiMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = GetWifiMac &rArr; getSpecData &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpecData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWifiPara
</UL>

<P><STRONG><a name="[158]"></a>GetWifiMode</STRONG> (Thumb, 100 bytes, Stack size 168 bytes, wifi_ble.o(.text.GetWifiMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GetWifiMode &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSpecData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiMode
</UL>

<P><STRONG><a name="[159]"></a>Get_Publish_Pl_One_Par_Item_Data</STRONG> (Thumb, 514 bytes, Stack size 32 bytes, mqtt.o(.text.Get_Publish_Pl_One_Par_Item_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_Publish_Pl_One_Par_Item_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
</UL>

<P><STRONG><a name="[148]"></a>GprsDisConn</STRONG> (Thumb, 528 bytes, Stack size 64 bytes, gprs.o(.text.GprsDisConn))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = GprsDisConn &rArr; IsDisconn &rArr; CmdExe &rArr; InsertLog &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDisconn
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G4_Task
</UL>

<P><STRONG><a name="[14d]"></a>Gprs_Para_Init</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, gprs.o(.text.Gprs_Para_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Gprs_Para_Init &rArr; Led_Ctrl &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Reset
</UL>

<P><STRONG><a name="[39]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>Hex1_To_Ascii2</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, comm_process.o(.text.Hex1_To_Ascii2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Hex1_To_Ascii2
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZ_Uart_Get_Data
</UL>

<P><STRONG><a name="[ef]"></a>HighLowVolCurrentTime</STRONG> (Thumb, 460 bytes, Stack size 16 bytes, main.o(.text.HighLowVolCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HighLowVolCurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackMotor_Ctrl
</UL>

<P><STRONG><a name="[15b]"></a>I2c_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i2c_hal.o(.text.I2c_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2c_Init &rArr; sht3x_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_Init
</UL>

<P><STRONG><a name="[15d]"></a>I2c_ReadByte</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, i2c_hal.o(.text.I2c_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2c_ReadByte &rArr; I2c_WaitWhileClockStreching &rArr; SCL_READ &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_READ
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OPEN
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_LOW
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OPEN
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_LOW
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WaitWhileClockStreching
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMicroSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_Read2BytesAndCrc
</UL>

<P><STRONG><a name="[165]"></a>I2c_StartCondition</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, i2c_hal.o(.text.I2c_StartCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2c_StartCondition &rArr; SDA_OPEN &rArr; gpio_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OPEN
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_LOW
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OPEN
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_LOW
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMicroSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_StartWriteAccess
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_StartReadAccess
</UL>

<P><STRONG><a name="[166]"></a>I2c_StopCondition</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, i2c_hal.o(.text.I2c_StopCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2c_StopCondition &rArr; SDA_OPEN &rArr; gpio_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OPEN
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_LOW
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OPEN
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_LOW
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMicroSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_StopAccess
</UL>

<P><STRONG><a name="[168]"></a>I2c_WriteByte</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, i2c_hal.o(.text.I2c_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2c_WriteByte &rArr; SDA_READ &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_READ
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OPEN
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_LOW
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OPEN
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_LOW
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMicroSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_WriteCommand
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_StartWriteAccess
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_StartReadAccess
</UL>

<P><STRONG><a name="[169]"></a>InitCH432</STRONG> (Thumb, 576 bytes, Stack size 80 bytes, ch432t.o(.text.InitCH432))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = InitCH432 &rArr; ReadCH432Data &rArr; ch432t_CS &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCH432Data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCH432Data
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch432t_Init
</UL>

<P><STRONG><a name="[16b]"></a>InitW5500Data</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, comm_process.o(.text.InitW5500Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitW5500Data
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Retransmission
</UL>

<P><STRONG><a name="[fe]"></a>InsertLog</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gprs.o(.text.InsertLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = InsertLog &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe_WB
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgWifiPara
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGPRS
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Run
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G4_Task
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResult
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDisconn
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDisConn
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSThread
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dailer_Pre
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dailer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMG323Status
</UL>

<P><STRONG><a name="[16c]"></a>IntToHexStr</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, usb_para.o(.text.IntToHexStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IntToHexStr &rArr; numtohex
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numtohex
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package2
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package
</UL>

<P><STRONG><a name="[21a]"></a>IntToStr</STRONG> (Thumb, 786 bytes, Stack size 32 bytes, usb_para.o(.text.IntToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IntToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package2
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package
</UL>

<P><STRONG><a name="[15a]"></a>IsDisconn</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, gprs.o(.text.IsDisconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = IsDisconn &rArr; CmdExe &rArr; InsertLog &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGPRS
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDisConn
</UL>

<P><STRONG><a name="[1f0]"></a>LeaveCritical</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cfg_flash.o(.text.LeaveCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
</UL>

<P><STRONG><a name="[e4]"></a>Led_Ctrl</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.Led_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Led_Ctrl &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenCtrl
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWIZnetLed
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResult
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gprs_Para_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDisConn
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSThread
</UL>

<P><STRONG><a name="[128]"></a>Length_Cal</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, comm_process.o(.text.Length_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Length_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZ_Uart_Get_Data
</UL>

<P><STRONG><a name="[238]"></a>Load_ADS1247_Parameters</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, cfg_flash.o(.text.Load_ADS1247_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Load_ADS1247_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_ads1247
</UL>

<P><STRONG><a name="[16e]"></a>Load_Ctrl_Relay</STRONG> (Thumb, 798 bytes, Stack size 40 bytes, main.o(.text.Load_Ctrl_Relay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Load_Ctrl_Relay &rArr; DO_Output_Ctrl &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DO_Output_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[239]"></a>Load_Net_Parameters</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, cfg_flash.o(.text.Load_Net_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Load_Net_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_net
</UL>

<P><STRONG><a name="[13e]"></a>Local_RTU</STRONG> (Thumb, 6530 bytes, Stack size 320 bytes, comm_process.o(.text.Local_RTU))
<BR><BR>[Stack]<UL><LI>Max Depth = 996<LI>Call Chain = Local_RTU &rArr; set_pvt_para &rArr; WriteConfigParaFromIICAll &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pvt_para
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_second_cal_active_date
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_system_reset
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pvt_para
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1247_calibrate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_setsystime
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheck
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Android_Ctrl
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersToIICAll
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaFromIICAll
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DO_Output_Ctrl
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTU_Process
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherNet_P
</UL>

<P><STRONG><a name="[17f]"></a>MQTT_CRC</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, mqtt.o(.text.MQTT_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MQTT_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
</UL>

<P><STRONG><a name="[178]"></a>MQTT_Connect</STRONG> (Thumb, 728 bytes, Stack size 1120 bytes, mqtt.o(.text.MQTT_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = MQTT_Connect &rArr; MQTT_Remain_Length_Encode
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Remain_Length_Encode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFixedHead
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Run
</UL>

<P><STRONG><a name="[17b]"></a>MQTT_PUBLISH</STRONG> (Thumb, 66050 bytes, Stack size 3520 bytes, mqtt.o(.text.MQTT_PUBLISH))
<BR><BR>[Stack]<UL><LI>Max Depth = 3656<LI>Call Chain = MQTT_PUBLISH &rArr; get_pvt_para &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pvt_para
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoASCII_to_1ByteData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_CRC
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_int
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Remain_Length_Encode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Publish_Pl_One_Par_Item_Data
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFixedHead
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Run
</UL>

<P><STRONG><a name="[19b]"></a>MQTT_Remain_Length_Decode</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mqtt.o(.text.MQTT_Remain_Length_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MQTT_Remain_Length_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
</UL>

<P><STRONG><a name="[17a]"></a>MQTT_Remain_Length_Encode</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, mqtt.o(.text.MQTT_Remain_Length_Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MQTT_Remain_Length_Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
</UL>

<P><STRONG><a name="[141]"></a>MQTT_Run</STRONG> (Thumb, 2410 bytes, Stack size 408 bytes, mqtt.o(.text.MQTT_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 4064<LI>Call Chain = MQTT_Run &rArr; MQTT_PUBLISH &rArr; get_pvt_para &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Send
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGPRS
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_flag
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G4_Task
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherNet_P
</UL>

<P><STRONG><a name="[180]"></a>MQTT_Send</STRONG> (Thumb, 436 bytes, Stack size 328 bytes, mqtt.o(.text.MQTT_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = MQTT_Send &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Run
</UL>

<P><STRONG><a name="[3a]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[190]"></a>Mqtt_PINGREQ_Time_Interval_ReadFromW25QXX</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mqtt.o(.text.Mqtt_PINGREQ_Time_Interval_ReadFromW25QXX))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[112]"></a>Mqtt_Rece_Proces</STRONG> (Thumb, 6572 bytes, Stack size 1792 bytes, comm_process.o(.text.Mqtt_Rece_Proces))
<BR><BR>[Stack]<UL><LI>Max Depth = 2468<LI>Call Chain = Mqtt_Rece_Proces &rArr; set_pvt_para &rArr; WriteConfigParaFromIICAll &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_data_modbus6_com
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pvt_para
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_float
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoASCII_to_1ByteData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_setsystime
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Send
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Remain_Length_Decode
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_CRC
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCompare
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD_To_Dec
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com2Com
</UL>

<P><STRONG><a name="[18f]"></a>Mqtt_Upload_Device_ID_ReadFromW25QXX</STRONG> (Thumb, 730 bytes, Stack size 52 bytes, mqtt.o(.text.Mqtt_Upload_Device_ID_ReadFromW25QXX))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Mqtt_Upload_Device_ID_ReadFromW25QXX
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[18e]"></a>Mqtt_Upload_Device_Total_ReadFromW25QXX</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mqtt.o(.text.Mqtt_Upload_Device_Total_ReadFromW25QXX))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[38]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d8]"></a>OneAscii_to_Data</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, mqtt.o(.text.OneAscii_to_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OneAscii_to_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoASCII_to_1ByteData
</UL>

<P><STRONG><a name="[19f]"></a>PCF_getsystime</STRONG> (Thumb, 524 bytes, Stack size 8 bytes, usb_para.o(.text.PCF_getsystime))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PCF_getsystime &rArr; rtc_second_cal_active_date &rArr; rtc_counter_get
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_second_cal_active_date
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsddata_package
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package2
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package
</UL>

<P><STRONG><a name="[11e]"></a>PCF_setsystime</STRONG> (Thumb, 620 bytes, Stack size 128 bytes, usb_para.o(.text.PCF_setsystime))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PCF_setsystime &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
</UL>

<P><STRONG><a name="[ee]"></a>PVLoadCurrentTime</STRONG> (Thumb, 206 bytes, Stack size 4 bytes, main.o(.text.PVLoadCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PVLoadCurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackMotor_Ctrl
</UL>

<P><STRONG><a name="[3f]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, portasm.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14c]"></a>Power4G_Ctrl</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.Power4G_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Power4G_Ctrl &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Reset
</UL>

<P><STRONG><a name="[1a1]"></a>PowerWifiBle_Ctrl</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.PowerWifiBle_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PowerWifiBle_Ctrl &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
</UL>

<P><STRONG><a name="[13d]"></a>Process_Socket_Data</STRONG> (Thumb, 526 bytes, Stack size 24 bytes, w5500.o(.text.Process_Socket_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 2492<LI>Call Chain = Process_Socket_Data &rArr; Mqtt_Rece_Proces &rArr; set_pvt_para &rArr; WriteConfigParaFromIICAll &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherNet_P
</UL>

<P><STRONG><a name="[1a3]"></a>RTC_Configuration</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rtc_user.o(.text.RTC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_Configuration &rArr; rtc_prescaler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_rtc_clock_config
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[184]"></a>RTC_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rtc_user.o(.text.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_Init &rArr; RTC_Configuration &rArr; rtc_prescaler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_lwoff_wait
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_all_reset_flag_clear
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_write_data
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_read_data
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[194]"></a>RTU_Process</STRONG> (Thumb, 1206 bytes, Stack size 32 bytes, comm_process.o(.text.RTU_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028<LI>Call Chain = RTU_Process &rArr; Local_RTU &rArr; set_pvt_para &rArr; WriteConfigParaFromIICAll &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Retransmission
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[1af]"></a>ReadADSConversionData</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ads1247.o(.text.ReadADSConversionData))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ReadADSConversionData &rArr; ADS_ReadByte &rArr; ADS_WriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_ReadByte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_AI_Data
</UL>

<P><STRONG><a name="[f2]"></a>ReadCH432Data</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ch432t.o(.text.ReadCH432Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadCH432Data &rArr; ch432t_CS &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us2
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch432t_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH432_Int_Process
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCH432
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH432UARTSend
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH432SerilRcv
</UL>

<P><STRONG><a name="[e1]"></a>ReadFlashWifi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cfg_flash.o(.text.ReadFlashWifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadFlashWifi &rArr; ReadFlash_CPU
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash_CPU
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1b2]"></a>ReadFlash_CPU</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, cfg_flash.o(.text.ReadFlash_CPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadFlash_CPU
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersToIICAll
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersADS1247
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaFromIICAll
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_net
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_ads1247
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashWifi
</UL>

<P><STRONG><a name="[1b3]"></a>ReadWifiPara</STRONG> (Thumb, 682 bytes, Stack size 24 bytes, wifi_ble.o(.text.ReadWifiPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = ReadWifiPara &rArr; ExitPassthroughMode &rArr; CmdExe_WB &rArr; WifiBleCmdSend &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiMode
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWifiMac
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTdInfo
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSsid
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRssi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNIP
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDhcp
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitPassthroughMode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe_WB
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Rj45_Param
</UL>

<P><STRONG><a name="[139]"></a>Read_AI_Data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ads1247.o(.text.Read_AI_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Read_AI_Data &rArr; ReadADSConversionData &rArr; ADS_ReadByte &rArr; ADS_WriteByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADSConversionData
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADT
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
</UL>

<P><STRONG><a name="[193]"></a>Read_DI_Input_State</STRONG> (Thumb, 612 bytes, Stack size 8 bytes, gd32e503v_eval.o(.text.Read_DI_Input_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_DI_Input_State &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[1a2]"></a>Read_SOCK_Data_Buffer</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, w5500.o(.text.Read_SOCK_Data_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Read_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_2Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_read_byte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnmpXDaemon
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_Data
</UL>

<P><STRONG><a name="[e5]"></a>Read_SW_Input_State</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, gd32e503v_eval.o(.text.Read_SW_Input_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Read_SW_Input_State &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[1bb]"></a>Read_W5500_1Byte</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, w5500.o(.text.Read_W5500_1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Read_W5500_1Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_read_byte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
</UL>

<P><STRONG><a name="[134]"></a>Read_W5500_SOCK_1Byte</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, w5500.o(.text.Read_W5500_SOCK_1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Read_W5500_SOCK_1Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_read_byte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
</UL>

<P><STRONG><a name="[1b6]"></a>Read_W5500_SOCK_2Byte</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, w5500.o(.text.Read_W5500_SOCK_2Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Read_W5500_SOCK_2Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_read_byte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[e8]"></a>ResetGPRS</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gprs.o(.text.ResetGPRS))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ResetGPRS &rArr; InsertLog &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Run
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResult
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDisconn
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSThread
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMG323Status
</UL>

<P><STRONG><a name="[1ae]"></a>Retransmission</STRONG> (Thumb, 1482 bytes, Stack size 16 bytes, comm_process.o(.text.Retransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = Retransmission &rArr; WriteParametersToIICAll &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitW5500Data
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersToIICAll
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sw_timeout
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTU_Process
</UL>

<P><STRONG><a name="[163]"></a>SCL_LOW</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2c_hal.o(.text.SCL_LOW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCL_LOW &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WriteByte
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StopCondition
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartCondition
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_ReadByte
</UL>

<P><STRONG><a name="[15f]"></a>SCL_OPEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2c_hal.o(.text.SCL_OPEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCL_OPEN &rArr; gpio_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WriteByte
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StopCondition
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartCondition
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_ReadByte
</UL>

<P><STRONG><a name="[167]"></a>SCL_READ</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2c_hal.o(.text.SCL_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SCL_READ &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WaitWhileClockStreching
</UL>

<P><STRONG><a name="[164]"></a>SDA_LOW</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2c_hal.o(.text.SDA_LOW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDA_LOW &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WriteByte
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StopCondition
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartCondition
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_ReadByte
</UL>

<P><STRONG><a name="[15e]"></a>SDA_OPEN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2c_hal.o(.text.SDA_OPEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDA_OPEN &rArr; gpio_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WriteByte
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StopCondition
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartCondition
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_ReadByte
</UL>

<P><STRONG><a name="[162]"></a>SDA_READ</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2c_hal.o(.text.SDA_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDA_READ &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WriteByte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_ReadByte
</UL>

<P><STRONG><a name="[155]"></a>SHT3X_GetTempAndHumi</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sht3x.o(.text.SHT3X_GetTempAndHumi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SHT3X_GetTempAndHumi &rArr; SHT3X_GetTempAndHumiPolling &rArr; SHT3X_Read2BytesAndCrc &rArr; SHT3X_CheckCrc &rArr; SHT3X_CalcCrc &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiPolling
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiClkStretch
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTH_SHT3X
</UL>

<P><STRONG><a name="[1be]"></a>SHT3X_GetTempAndHumiClkStretch</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, sht3x.o(.text.SHT3X_GetTempAndHumiClkStretch))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SHT3X_GetTempAndHumiClkStretch &rArr; SHT3X_Read2BytesAndCrc &rArr; SHT3X_CheckCrc &rArr; SHT3X_CalcCrc &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_WriteCommand
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_StopAccess
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_StartWriteAccess
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_StartReadAccess
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_Read2BytesAndCrc
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_CalcTemperature
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_CalcHumidity
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumi
</UL>

<P><STRONG><a name="[1bf]"></a>SHT3X_GetTempAndHumiPolling</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, sht3x.o(.text.SHT3X_GetTempAndHumiPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SHT3X_GetTempAndHumiPolling &rArr; SHT3X_Read2BytesAndCrc &rArr; SHT3X_CheckCrc &rArr; SHT3X_CalcCrc &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMicroSeconds
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_WriteCommand
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_StopAccess
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_StartWriteAccess
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_StartReadAccess
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_Read2BytesAndCrc
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_CalcTemperature
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_CalcHumidity
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumi
</UL>

<P><STRONG><a name="[154]"></a>SHT3X_Init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sht3x.o(.text.SHT3X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SHT3X_Init &rArr; I2c_Init &rArr; sht3x_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_SetI2cAdr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTH_SHT3X
</UL>

<P><STRONG><a name="[1c7]"></a>SHT3X_SetI2cAdr</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, sht3x.o(.text.SHT3X_SetI2cAdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SHT3X_SetI2cAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_Init
</UL>

<P><STRONG><a name="[146]"></a>SPI_FLASH_BufferRead</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, spi_flash.o(.text.SPI_FLASH_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Data_Init
</UL>

<P><STRONG><a name="[143]"></a>SPI_FLASH_Init</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, spi_flash.o(.text.SPI_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SPI_FLASH_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Data_Init
</UL>

<P><STRONG><a name="[144]"></a>SPI_FLASH_ReadID</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, spi_flash.o(.text.SPI_FLASH_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Data_Init
</UL>

<P><STRONG><a name="[1c8]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, spi_flash.o(.text.SPI_FLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI_FLASH_SendByte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>

<P><STRONG><a name="[3d]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, portasm.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c9]"></a>Send_Modbus</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, comm_process.o(.text.Send_Modbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Send_Modbus &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheck
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_data
</UL>

<P><STRONG><a name="[1ca]"></a>SetConfig</STRONG> (Thumb, 222 bytes, Stack size 160 bytes, usb_para.o(.text.SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = SetConfig &rArr; WriteParametersToIICAll &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersToIICAll
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaFromIICAll
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_analy
</UL>

<P><STRONG><a name="[13f]"></a>SnmpXDaemon</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, snmplib.o(.text.SnmpXDaemon))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = SnmpXDaemon &rArr; parseSNMPMessage &rArr; parseVersion &rArr; parseCommunity &rArr; parseRequest &rArr; parseSequenceOf &rArr; parseSequence &rArr; parseVarBind &rArr; setEntry &rArr; getValue
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSNMPMessage
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpCode
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherNet_P
</UL>

<P><STRONG><a name="[1cd]"></a>Socket_Connect</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, w5500.o(.text.Socket_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Socket_Connect &rArr; Write_W5500_SOCK_1Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Socket_Set
</UL>

<P><STRONG><a name="[1ce]"></a>Socket_Init</STRONG> (Thumb, 454 bytes, Stack size 56 bytes, w5500.o(.text.Socket_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Socket_Init &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strIP2ip
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
</UL>

<P><STRONG><a name="[1cf]"></a>Socket_UDP</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, w5500.o(.text.Socket_UDP))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Socket_UDP &rArr; Write_W5500_SOCK_1Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Socket_Set
</UL>

<P><STRONG><a name="[11c]"></a>StrToInt</STRONG> (Thumb, 236 bytes, Stack size 20 bytes, usb_para.o(.text.StrToInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = StrToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
</UL>

<P><STRONG><a name="[40]"></a>SysTick_Handler</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>SystemInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system_gd32e50x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; system_clock_config &rArr; system_clock_168m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(.text)
</UL>
<P><STRONG><a name="[151]"></a>ToIp</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, wifi_ble.o(.text.ToIp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ToIp &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTdInfo
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNIP
</UL>

<P><STRONG><a name="[17d]"></a>TwoASCII_to_1ByteData</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mqtt.o(.text.TwoASCII_to_1ByteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TwoASCII_to_1ByteData &rArr; OneAscii_to_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneAscii_to_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
</UL>

<P><STRONG><a name="[75]"></a>UART3_IRQHandler</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, gd32e50x_it.o(.text.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART3_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>UART4_IRQHandler</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, gd32e50x_it.o(.text.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART4_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[220]"></a>UIntToStr</STRONG> (Thumb, 572 bytes, Stack size 32 bytes, usb_para.o(.text.UIntToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UIntToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package2
</UL>

<P><STRONG><a name="[66]"></a>USART0_IRQHandler</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, gd32e50x_it.o(.text.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART0_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USART1_IRQHandler</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, gd32e50x_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART1_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>USART2_IRQHandler</STRONG> (Thumb, 646 bytes, Stack size 16 bytes, gd32e50x_it.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART2_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>USART5_IRQHandler</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, gd32e50x_it.o(.text.USART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART5_IRQHandler &rArr; usart5_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_interrupt_flag_get
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, gd32e50x_it.o(.text.USBD_LP_CAN0_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_LP_CAN0_RX0_IRQHandler &rArr; usbd_isr &rArr; usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e50x_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e50x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>V_Calc</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, ad_process.o(.text.V_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = V_Calc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cycle_Detect_Process
</UL>

<P><STRONG><a name="[ea]"></a>W5500_Hardware_Reset</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, w5500.o(.text.W5500_Hardware_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W5500_Hardware_Reset &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1e1]"></a>W5500_Init</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, w5500.o(.text.W5500_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = W5500_Init &rArr; Write_W5500_nByte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_nByte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_2Byte
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
</UL>

<P><STRONG><a name="[eb]"></a>W5500_Initialization</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, w5500.o(.text.W5500_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = W5500_Initialization &rArr; Socket_Init &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[13c]"></a>W5500_Interrupt_Process</STRONG> (Thumb, 1026 bytes, Stack size 56 bytes, w5500.o(.text.W5500_Interrupt_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = W5500_Interrupt_Process &rArr; Socket_Init &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherNet_P
</UL>

<P><STRONG><a name="[13b]"></a>W5500_Socket_Set</STRONG> (Thumb, 412 bytes, Stack size 8 bytes, w5500.o(.text.W5500_Socket_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = W5500_Socket_Set &rArr; Socket_UDP &rArr; Write_W5500_SOCK_1Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherNet_P
</UL>

<P><STRONG><a name="[14a]"></a>WaitForResult</STRONG> (Thumb, 874 bytes, Stack size 40 bytes, gprs.o(.text.WaitForResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = WaitForResult &rArr; ResetGPRS &rArr; InsertLog &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertLog
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetGPRS
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSThread
</UL>

<P><STRONG><a name="[10c]"></a>WifiBleCmdSend</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wifi_ble.o(.text.WifiBleCmdSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = WifiBleCmdSend &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe_WB
</UL>

<P><STRONG><a name="[1b4]"></a>WifiMode</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wifi_ble.o(.text.WifiMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = WifiMode &rArr; CmdExe_WB &rArr; WifiBleCmdSend &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWifiMode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe_WB
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWifiPara
</UL>

<P><STRONG><a name="[1e5]"></a>Wifi_Rj45_Param</STRONG> (Thumb, 1306 bytes, Stack size 40 bytes, usb_para.o(.text.Wifi_Rj45_Param))
<BR><BR>[Stack]<UL><LI>Max Depth = 860<LI>Call Chain = Wifi_Rj45_Param &rArr; CfgWifiPara &rArr; ExitPassthroughMode &rArr; CmdExe_WB &rArr; WifiBleCmdSend &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_system_reset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWifiPara
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgWifiPara
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersToIICAll
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashWifi
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com4_2440
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_process_usb
</UL>

<P><STRONG><a name="[f4]"></a>WriteCH432Block</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, ch432t.o(.text.WriteCH432Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteCH432Block &rArr; ch432t_CS &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us2
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch432t_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH432UARTSend
</UL>

<P><STRONG><a name="[16a]"></a>WriteCH432Data</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ch432t.o(.text.WriteCH432Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteCH432Data &rArr; ch432t_CS &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us2
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch432t_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCH432
</UL>

<P><STRONG><a name="[177]"></a>WriteConfigParaFromIICAll</STRONG> (Thumb, 118 bytes, Stack size 544 bytes, cfg_flash.o(.text.WriteConfigParaFromIICAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = WriteConfigParaFromIICAll &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash_CPU
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pvt_para
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConfig
</UL>

<P><STRONG><a name="[1e7]"></a>WriteFlashWifi</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cfg_flash.o(.text.WriteFlashWifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = WriteFlashWifi &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Rj45_Param
</UL>

<P><STRONG><a name="[1e9]"></a>WriteFlash_CPU</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, cfg_flash.o(.text.WriteFlash_CPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeaveCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersToIICAll
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersADS1247
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashWifi
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaFromIICAll
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_net
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_ads1247
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
</UL>

<P><STRONG><a name="[1f1]"></a>WriteParametersADS1247</STRONG> (Thumb, 156 bytes, Stack size 544 bytes, cfg_flash.o(.text.WriteParametersADS1247))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = WriteParametersADS1247 &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash_CPU
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1247_calibrate
</UL>

<P><STRONG><a name="[176]"></a>WriteParametersToIICAll</STRONG> (Thumb, 156 bytes, Stack size 544 bytes, cfg_flash.o(.text.WriteParametersToIICAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = WriteParametersToIICAll &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash_CPU
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Retransmission
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Rj45_Param
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConfig
</UL>

<P><STRONG><a name="[111]"></a>Write_SOCK_Data_Buffer</STRONG> (Thumb, 494 bytes, Stack size 32 bytes, w5500.o(.text.Write_SOCK_Data_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Send
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnmpXDaemon
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com2Com
</UL>

<P><STRONG><a name="[1e2]"></a>Write_W5500_1Byte</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, w5500.o(.text.Write_W5500_1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Write_W5500_1Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
</UL>

<P><STRONG><a name="[1e4]"></a>Write_W5500_2Byte</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, w5500.o(.text.Write_W5500_2Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Write_W5500_2Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[133]"></a>Write_W5500_SOCK_1Byte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, w5500.o(.text.Write_W5500_SOCK_1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Write_W5500_SOCK_1Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
</UL>

<P><STRONG><a name="[1ba]"></a>Write_W5500_SOCK_2Byte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, w5500.o(.text.Write_W5500_SOCK_2Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Write_W5500_SOCK_2Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnmpXDaemon
</UL>

<P><STRONG><a name="[132]"></a>Write_W5500_SOCK_4Byte</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, w5500.o(.text.Write_W5500_SOCK_4Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnmpXDaemon
</UL>

<P><STRONG><a name="[1e3]"></a>Write_W5500_nByte</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, w5500.o(.text.Write_W5500_nByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Write_W5500_nByte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
</UL>

<P><STRONG><a name="[cd]"></a>_delay_us</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ads1247.o(.text._delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADSConversionData
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WREG
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_RREG
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_Init
</UL>

<P><STRONG><a name="[93]"></a>_usb_in0_transc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usbd_transc.o(.text._usb_in0_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _usb_in0_transc &rArr; usb_ctl_out
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_out
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_0len_packet_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.text.usbd_init)
</UL>
<P><STRONG><a name="[92]"></a>_usb_out0_transc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbd_transc.o(.text._usb_out0_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _usb_out0_transc &rArr; usb_ctl_status_in
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_status_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.text.usbd_init)
</UL>
<P><STRONG><a name="[91]"></a>_usb_setup_transc</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, usbd_transc.o(.text._usb_setup_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _usb_setup_transc &rArr; usb_ctl_data_in &rArr; usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stall_transc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_status_in
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_out
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_data_in
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_vendor_request
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.text.usbd_init)
</UL>
<P><STRONG><a name="[c6]"></a>adc_calibration_enable</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, gd32e50x_adc.o(.text.adc_calibration_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_calibration_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[c0]"></a>adc_channel_length_config</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gd32e50x_adc.o(.text.adc_channel_length_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[be]"></a>adc_data_alignment_config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32e50x_adc.o(.text.adc_data_alignment_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_data_alignment_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[bc]"></a>adc_deinit</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, gd32e50x_adc.o(.text.adc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adc_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[c5]"></a>adc_enable</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, gd32e50x_adc.o(.text.adc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[c3]"></a>adc_external_trigger_config</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, gd32e50x_adc.o(.text.adc_external_trigger_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_external_trigger_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[c2]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gd32e50x_adc.o(.text.adc_external_trigger_source_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_external_trigger_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[c1]"></a>adc_inserted_channel_config</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, gd32e50x_adc.o(.text.adc_inserted_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_inserted_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[bf]"></a>adc_mode_config</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, gd32e50x_adc.o(.text.adc_mode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_mode_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[d8]"></a>adc_software_trigger_enable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gd32e50x_adc.o(.text.adc_software_trigger_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_software_trigger_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_software_trigger
</UL>

<P><STRONG><a name="[bd]"></a>adc_special_function_config</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, gd32e50x_adc.o(.text.adc_special_function_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_special_function_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[c4]"></a>adc_tempsensor_vrefint_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e50x_adc.o(.text.adc_tempsensor_vrefint_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[174]"></a>ads1247_calibrate</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, comm_process.o(.text.ads1247_calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = ads1247_calibrate &rArr; WriteParametersADS1247 &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParametersADS1247
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
</UL>

<P><STRONG><a name="[1a5]"></a>bkp_deinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gd32e50x_bkp.o(.text.bkp_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bkp_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_bkp_reset_enable
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_bkp_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[1aa]"></a>bkp_read_data</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, gd32e50x_bkp.o(.text.bkp_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bkp_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[1ab]"></a>bkp_write_data</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, gd32e50x_bkp.o(.text.bkp_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bkp_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[206]"></a>can1_filter_start_bank</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, gd32e50x_can.o(.text.can1_filter_start_bank))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can1_filter_start_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[186]"></a>can_config</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, can_bus.o(.text.can_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = can_config &rArr; can_filter_mask_mode_init &rArr; can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_mask_mode_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_filter_start_bank
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[204]"></a>can_deinit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, gd32e50x_can.o(.text.can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = can_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[20e]"></a>can_error_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e50x_can.o(.text.can_error_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_error_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get
</UL>

<P><STRONG><a name="[20b]"></a>can_filter_init</STRONG> (Thumb, 310 bytes, Stack size 12 bytes, gd32e50x_can.o(.text.can_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_mask_mode_init
</UL>

<P><STRONG><a name="[207]"></a>can_filter_mask_mode_init</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, gd32e50x_can.o(.text.can_filter_mask_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = can_filter_mask_mode_init &rArr; can_struct_para_init
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[185]"></a>can_gpio_config</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gd32e503v_eval.o(.text.can_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[205]"></a>can_init</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, gd32e50x_can.o(.text.can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[20a]"></a>can_interrupt_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e50x_can.o(.text.can_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[1de]"></a>can_interrupt_flag_get</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, gd32e50x_can.o(.text.can_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = can_interrupt_flag_get &rArr; can_receive_message_length_get
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_message_length_get
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_get
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[1df]"></a>can_message_receive</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, gd32e50x_can.o(.text.can_message_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_message_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[20f]"></a>can_message_transmit</STRONG> (Thumb, 328 bytes, Stack size 20 bytes, gd32e50x_can.o(.text.can_message_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can_message_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
</UL>

<P><STRONG><a name="[20d]"></a>can_receive_message_length_get</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gd32e50x_can.o(.text.can_receive_message_length_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_receive_message_length_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_get
</UL>

<P><STRONG><a name="[197]"></a>can_send</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, can_bus.o(.text.can_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can_send &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[203]"></a>can_struct_para_init</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, gd32e50x_can.o(.text.can_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_mask_mode_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[115]"></a>cdc_acm_check_ready</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, cdc_acm_core.o(.text.cdc_acm_check_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cdc_acm_check_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[116]"></a>cdc_acm_data_receive</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, cdc_acm_core.o(.text.cdc_acm_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cdc_acm_data_receive &rArr; usbd_ep_recev &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_system_reset
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[117]"></a>cdc_acm_data_send</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, cdc_acm_core.o(.text.cdc_acm_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = cdc_acm_data_send &rArr; usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_system_reset
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[1b0]"></a>ch432t_CS</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ch432t.o(.text.ch432t_CS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ch432t_CS &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCH432Data
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCH432Block
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCH432Data
</UL>

<P><STRONG><a name="[215]"></a>ch432t_IO_Init</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, ch432t.o(.text.ch432t_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ch432t_IO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch432t_Init
</UL>

<P><STRONG><a name="[183]"></a>ch432t_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ch432t.o(.text.ch432t_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ch432t_Init &rArr; InitCH432 &rArr; ReadCH432Data &rArr; ch432t_CS &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch432t_IO_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCH432
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[216]"></a>charToHexStr</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, usb_para.o(.text.charToHexStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = charToHexStr &rArr; numtohex
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numtohex
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package2
</UL>

<P><STRONG><a name="[21f]"></a>chartoip</STRONG> (Thumb, 282 bytes, Stack size 20 bytes, usb_para.o(.text.chartoip))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chartoip
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package2
</UL>

<P><STRONG><a name="[181]"></a>clear_flag</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, mqtt.o(.text.clear_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = clear_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Run
</UL>

<P><STRONG><a name="[1e6]"></a>com4_2440</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usb_para.o(.text.com4_2440))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com4_2440 &rArr; putStr &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Rj45_Param
</UL>

<P><STRONG><a name="[199]"></a>comm_process_usb</STRONG> (Thumb, 848 bytes, Stack size 16 bytes, usb_para.o(.text.comm_process_usb))
<BR><BR>[Stack]<UL><LI>Max Depth = 876<LI>Call Chain = comm_process_usb &rArr; Wifi_Rj45_Param &rArr; CfgWifiPara &rArr; ExitPassthroughMode &rArr; CmdExe_WB &rArr; WifiBleCmdSend &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsddata_package
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_analy
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Rj45_Param
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[198]"></a>communication_check</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, can_bus.o(.text.communication_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = communication_check &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[219]"></a>configinfo_analy</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usb_para.o(.text.configinfo_analy))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = configinfo_analy &rArr; SetConfig &rArr; WriteParametersToIICAll &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putStr
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_process_usb
</UL>

<P><STRONG><a name="[218]"></a>configinfo_package</STRONG> (Thumb, 3028 bytes, Stack size 232 bytes, usb_para.o(.text.configinfo_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = configinfo_package &rArr; configinfo_package2 &rArr; putStr &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strIntTostrFloat
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putStr
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettellen2
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettellen
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package2
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_getsystime
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToHexStr
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_process_usb
</UL>

<P><STRONG><a name="[21e]"></a>configinfo_package2</STRONG> (Thumb, 590 bytes, Stack size 152 bytes, usb_para.o(.text.configinfo_package2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = configinfo_package2 &rArr; putStr &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putStr
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chartoip
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charToHexStr
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIntToStr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_getsystime
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToStr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToHexStr
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package
</UL>

<P><STRONG><a name="[221]"></a>deal_rev_data</STRONG> (Thumb, 13736 bytes, Stack size 2664 bytes, comm_process.o(.text.deal_rev_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 2752<LI>Call Chain = deal_rev_data &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheck
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum_Cal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ascii4_To_Hex2
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ascii2_To_Hex1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_device_info
</UL>

<P><STRONG><a name="[10a]"></a>delay_1ms</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, port.o(.text.delay_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Send
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitPassthroughMode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe_WB
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_UDP
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Run
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Rj45_Param
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForResult
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDisconn
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Reset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dailer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe
</UL>

<P><STRONG><a name="[119]"></a>delay_us</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32e503v_eval.o(.text.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
</UL>

<P><STRONG><a name="[1b1]"></a>delay_us2</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ch432t.o(.text.delay_us2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_us2
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCH432Data
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCH432Block
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCH432Data
</UL>

<P><STRONG><a name="[1cb]"></a>dumpCode</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, snmplib.o(.text.dumpCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dumpCode &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnmpXDaemon
</UL>

<P><STRONG><a name="[11f]"></a>eTaskGetState</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, tasks.o(.text.eTaskGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eTaskGetState &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
</UL>

<P><STRONG><a name="[192]"></a>exti_init</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, gd32e50x_exti.o(.text.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[138]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, gd32e50x_exti.o(.text.exti_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = exti_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gd32e50x_exti.o(.text.exti_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exti_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
</UL>

<P><STRONG><a name="[224]"></a>findEntry</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, snmplib.o(.text.findEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = findEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVarBind
</UL>

<P><STRONG><a name="[17e]"></a>float_to_int</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mqtt.o(.text.float_to_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = float_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
</UL>

<P><STRONG><a name="[1ec]"></a>fmc_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, gd32e50x_fmc.o(.text.fmc_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
</UL>

<P><STRONG><a name="[1ee]"></a>fmc_lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e50x_fmc.o(.text.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
</UL>

<P><STRONG><a name="[1ed]"></a>fmc_page_erase</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gd32e50x_fmc.o(.text.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fmc_page_erase &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
</UL>

<P><STRONG><a name="[1eb]"></a>fmc_unlock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32e50x_fmc.o(.text.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
</UL>

<P><STRONG><a name="[1ef]"></a>fmc_word_program</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gd32e50x_fmc.o(.text.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
</UL>

<P><STRONG><a name="[94]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[18c]"></a>gd_eval_com_init</STRONG> (Thumb, 570 bytes, Stack size 32 bytes, gd32e503v_eval.o(.text.gd_eval_com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = gd_eval_com_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_afio_port_config
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_overrun_disable
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_interrupt_enable
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_usart5_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[e2]"></a>gd_eval_io_init</STRONG> (Thumb, 524 bytes, Stack size 64 bytes, gd32e503v_eval.o(.text.gd_eval_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = gd_eval_io_init &rArr; nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DO_Output_Ctrl
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerWifiBle_Ctrl
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power4G_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1b]"></a>get12V</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, snmpdemo.o(.text.get12V))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get12V &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[19]"></a>getAd</STRONG> (Thumb, 408 bytes, Stack size 176 bytes, snmpdemo.o(.text.getAd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = getAd &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[18]"></a>getAndroid_Ctrl</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, snmpdemo.o(.text.getAndroid_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getAndroid_Ctrl &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[1a]"></a>getBat</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, snmpdemo.o(.text.getBat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getBat &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[1e]"></a>getComInfo</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, snmpdemo.o(.text.getComInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = getComInfo &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[14]"></a>getDeviceTempe</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, snmpdemo.o(.text.getDeviceTempe))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getDeviceTempe &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[17]"></a>getDipStatus</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, snmpdemo.o(.text.getDipStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getDipStatus &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[235]"></a>getEntry</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, snmplib.o(.text.getEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVarBind
</UL>

<P><STRONG><a name="[15]"></a>getInputStatus</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, snmpdemo.o(.text.getInputStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getInputStatus &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[1c]"></a>getModbus_ID</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, snmpdemo.o(.text.getModbus_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getModbus_ID &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[244]"></a>getOID</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, snmplib.o(.text.getOID))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getOID
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVarBind
</UL>

<P><STRONG><a name="[16]"></a>getOutputStatus</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, snmpdemo.o(.text.getOutputStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getOutputStatus &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[13]"></a>getRTS</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, snmpdemo.o(.text.getRTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getRTS &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[1d]"></a>getRj45</STRONG> (Thumb, 212 bytes, Stack size 144 bytes, snmpdemo.o(.text.getRj45))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getRj45 &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[fa]"></a>getSpecData</STRONG> (Thumb, 594 bytes, Stack size 64 bytes, wifi_ble.o(.text.getSpecData))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = getSpecData &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWifiMode
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWifiMac
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTdInfo
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSsid
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRssi
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNIP
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDhcp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgWifiPara
</UL>

<P><STRONG><a name="[252]"></a>getValue</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, snmplib.o(.text.getValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getValue
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setEntry
</UL>

<P><STRONG><a name="[12]"></a>getWIZnetLed</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, snmpdemo.o(.text.getWIZnetLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getWIZnetLed &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[195]"></a>get_all_device_info</STRONG> (Thumb, 4502 bytes, Stack size 80 bytes, comm_process.o(.text.get_all_device_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 2832<LI>Call Chain = get_all_device_info &rArr; deal_rev_data &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_data
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_rev_data
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DZ_Uart_Get_Data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sw_timeout
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[170]"></a>get_pvt_para</STRONG> (Thumb, 586 bytes, Stack size 48 bytes, comm_process.o(.text.get_pvt_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_pvt_para &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strIP2ip
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PUBLISH
</UL>

<P><STRONG><a name="[142]"></a>get_sw_timeout</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, comm_process.o(.text.get_sw_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_sw_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Retransmission
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_device_info
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherNet_Tran2Com
</UL>

<P><STRONG><a name="[21c]"></a>gettellen</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, usb_para.o(.text.gettellen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gettellen
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package
</UL>

<P><STRONG><a name="[21d]"></a>gettellen2</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, usb_para.o(.text.gettellen2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gettellen2
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package
</UL>

<P><STRONG><a name="[228]"></a>gpio_afio_port_config</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, gd32e50x_gpio.o(.text.gpio_afio_port_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_afio_port_config
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[cc]"></a>gpio_bit_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32e50x_gpio.o(.text.gpio_bit_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_CS
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_nByte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_2Byte
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DO_Output_Ctrl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Channel_Select
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch432t_CS
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_LOW
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_LOW
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dp_pullup
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerWifiBle_Ctrl
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power4G_Ctrl
</UL>

<P><STRONG><a name="[ce]"></a>gpio_bit_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32e50x_gpio.o(.text.gpio_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_CS
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_nByte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_2Byte
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DO_Output_Ctrl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Channel_Select
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch432t_CS
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OPEN
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OPEN
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dp_pullup
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerWifiBle_Ctrl
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power4G_Ctrl
</UL>

<P><STRONG><a name="[188]"></a>gpio_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32e50x_usbd_hw.o(.text.gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[191]"></a>gpio_exti_source_select</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, gd32e50x_gpio.o(.text.gpio_exti_source_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_exti_source_select
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[b9]"></a>gpio_init</STRONG> (Thumb, 388 bytes, Stack size 28 bytes, gd32e50x_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Configuration
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_IO_Init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch432t_IO_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_Init
</UL>

<P><STRONG><a name="[136]"></a>gpio_input_bit_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32e50x_gpio.o(.text.gpio_input_bit_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SW_Input_State
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DI_Input_State
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Get_Sta
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_READ
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_READ
</UL>

<P><STRONG><a name="[20c]"></a>gpio_pin_remap_config</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, gd32e50x_gpio.o(.text.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch432t_IO_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht3x_Init
</UL>

<P><STRONG><a name="[e0]"></a>init_config</STRONG> (Thumb, 1824 bytes, Stack size 64 bytes, cfg_flash.o(.text.init_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = init_config &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash_CPU
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[df]"></a>init_config_ads1247</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, cfg_flash.o(.text.init_config_ads1247))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = init_config_ads1247 &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash_CPU
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_ADS1247_Parameters
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[dd]"></a>init_config_net</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, cfg_flash.o(.text.init_config_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = init_config_net &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash_CPU
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash_CPU
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Net_Parameters
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[23f]"></a>insertRespLen</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, snmplib.o(.text.insertRespLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = insertRespLen
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequenceOf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequence
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSNMPMessage
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseRequest
</UL>

<P><STRONG><a name="[19d]"></a>int_to_float</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, mqtt.o(.text.int_to_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = int_to_float &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
</UL>

<P><STRONG><a name="[8d]"></a>main</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 4216<LI>Call Chain = main &rArr; Main_Task &rArr; G4_Task &rArr; MQTT_Run &rArr; MQTT_PUBLISH &rArr; get_pvt_para &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[16d]"></a>numtohex</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usb_para.o(.text.numtohex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = numtohex
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charToHexStr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToHexStr
</UL>

<P><STRONG><a name="[18a]"></a>nvic_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32e50x_usbd_hw.o(.text.nvic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nvic_config &rArr; nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[209]"></a>nvic_irq_enable</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, gd32e50x_misc.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[208]"></a>nvic_priority_group_set</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32e50x_misc.o(.text.nvic_priority_group_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[10e]"></a>nvic_system_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e50x_misc.o(.text.nvic_system_reset))
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_receive
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com1_Boot
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Rj45_Param
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
</UL>

<P><STRONG><a name="[1d7]"></a>nvic_vector_table_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32e50x_misc.o(.text.nvic_vector_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_vector_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[248]"></a>ob_data_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e50x_fmc.o(.text.ob_data_get))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_base_info
</UL>

<P><STRONG><a name="[24a]"></a>ob_security_protection_flag_get</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, gd32e50x_fmc.o(.text.ob_security_protection_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ob_security_protection_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_base_info
</UL>

<P><STRONG><a name="[247]"></a>ob_user_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e50x_fmc.o(.text.ob_user_get))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_base_info
</UL>

<P><STRONG><a name="[249]"></a>ob_write_protection_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e50x_fmc.o(.text.ob_write_protection_get))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_base_info
</UL>

<P><STRONG><a name="[23b]"></a>parseCommunity</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, snmplib.o(.text.parseCommunity))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = parseCommunity &rArr; parseRequest &rArr; parseSequenceOf &rArr; parseSequence &rArr; parseVarBind &rArr; setEntry &rArr; getValue
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseRequest
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVersion
</UL>

<P><STRONG><a name="[243]"></a>parseLength</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, snmplib.o(.text.parseLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = parseLength
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
</UL>

<P><STRONG><a name="[23d]"></a>parseRequest</STRONG> (Thumb, 488 bytes, Stack size 112 bytes, snmplib.o(.text.parseRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = parseRequest &rArr; parseSequenceOf &rArr; parseSequence &rArr; parseVarBind &rArr; setEntry &rArr; getValue
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequenceOf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertRespLen
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseCommunity
</UL>

<P><STRONG><a name="[1cc]"></a>parseSNMPMessage</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, snmplib.o(.text.parseSNMPMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = parseSNMPMessage &rArr; parseVersion &rArr; parseCommunity &rArr; parseRequest &rArr; parseSequenceOf &rArr; parseSequence &rArr; parseVarBind &rArr; setEntry &rArr; getValue
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVersion
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertRespLen
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnmpXDaemon
</UL>

<P><STRONG><a name="[241]"></a>parseSequence</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, snmplib.o(.text.parseSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = parseSequence &rArr; parseVarBind &rArr; setEntry &rArr; getValue
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVarBind
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertRespLen
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequenceOf
</UL>

<P><STRONG><a name="[23e]"></a>parseSequenceOf</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, snmplib.o(.text.parseSequenceOf))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = parseSequenceOf &rArr; parseSequence &rArr; parseVarBind &rArr; setEntry &rArr; getValue
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequence
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertRespLen
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseRequest
</UL>

<P><STRONG><a name="[23c]"></a>parseTLV</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, snmplib.o(.text.parseTLV))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = parseTLV &rArr; parseLength
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseLength
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVersion
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVarBind
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequenceOf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequence
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSNMPMessage
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseRequest
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseCommunity
</UL>

<P><STRONG><a name="[242]"></a>parseVarBind</STRONG> (Thumb, 756 bytes, Stack size 112 bytes, snmplib.o(.text.parseVarBind))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = parseVarBind &rArr; setEntry &rArr; getValue
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setEntry
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOID
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEntry
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findEntry
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSequence
</UL>

<P><STRONG><a name="[240]"></a>parseVersion</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, snmplib.o(.text.parseVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = parseVersion &rArr; parseCommunity &rArr; parseRequest &rArr; parseSequenceOf &rArr; parseSequence &rArr; parseVarBind &rArr; setEntry &rArr; getValue
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTLV
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseCommunity
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSNMPMessage
</UL>

<P><STRONG><a name="[1a4]"></a>pmu_backup_write_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e50x_pmu.o(.text.pmu_backup_write_enable))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[18d]"></a>print_base_info</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, gd32e503v_eval.o(.text.print_base_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = print_base_info &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_write_protection_get
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_user_get
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_security_protection_flag_get
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_data_get
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[121]"></a>putStr</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_para.o(.text.putStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = putStr &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsddata_package
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package2
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_analy
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com4_2440
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
</UL>

<P><STRONG><a name="[bb]"></a>rcu_adc_clock_config</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, gd32e50x_rcu.o(.text.rcu_adc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcu_adc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
</UL>

<P><STRONG><a name="[1ad]"></a>rcu_all_reset_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e50x_rcu.o(.text.rcu_all_reset_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[202]"></a>rcu_bkp_reset_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e50x_rcu.o(.text.rcu_bkp_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
</UL>

<P><STRONG><a name="[201]"></a>rcu_bkp_reset_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e50x_rcu.o(.text.rcu_bkp_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_deinit
</UL>

<P><STRONG><a name="[246]"></a>rcu_clock_freq_get</STRONG> (Thumb, 620 bytes, Stack size 100 bytes, gd32e50x_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_base_info
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[187]"></a>rcu_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e50x_usbd_hw.o(.text.rcu_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcu_config &rArr; rcu_usb_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_usb_clock_config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[1ac]"></a>rcu_flag_get</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, gd32e50x_rcu.o(.text.rcu_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[b8]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32e50x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Configuration
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_io_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_IO_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Inititile
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch432t_IO_Init
</UL>

<P><STRONG><a name="[200]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32e50x_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[1ff]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32e50x_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[1a6]"></a>rcu_rtc_clock_config</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32e50x_rcu.o(.text.rcu_rtc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_rtc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[229]"></a>rcu_usart5_clock_config</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32e50x_rcu.o(.text.rcu_usart5_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_usart5_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[24c]"></a>rcu_usb_clock_config</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32e50x_rcu.o(.text.rcu_usb_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_usb_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
</UL>

<P><STRONG><a name="[24d]"></a>rtc_configuration_mode_enter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e50x_rtc.o(.text.rtc_configuration_mode_enter))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
</UL>

<P><STRONG><a name="[24e]"></a>rtc_configuration_mode_exit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32e50x_rtc.o(.text.rtc_configuration_mode_exit))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_prescaler_set
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
</UL>

<P><STRONG><a name="[24f]"></a>rtc_counter_get</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, gd32e50x_rtc.o(.text.rtc_counter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtc_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_second_cal_active_date
</UL>

<P><STRONG><a name="[1a0]"></a>rtc_counter_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gd32e50x_rtc.o(.text.rtc_counter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_counter_set
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_setsystime
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[1a8]"></a>rtc_lwoff_wait</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32e50x_rtc.o(.text.rtc_lwoff_wait))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[1a9]"></a>rtc_prescaler_set</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gd32e50x_rtc.o(.text.rtc_prescaler_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_prescaler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_exit
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_configuration_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[1a7]"></a>rtc_register_sync_wait</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32e50x_rtc.o(.text.rtc_register_sync_wait))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[171]"></a>rtc_second_cal_active_date</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, usb_para.o(.text.rtc_second_cal_active_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rtc_second_cal_active_date &rArr; rtc_counter_get
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_getsystime
</UL>

<P><STRONG><a name="[122]"></a>send_data</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usb_para.o(.text.send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_data &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsddata_package
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package2
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_analy
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com4_2440
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
</UL>

<P><STRONG><a name="[250]"></a>serial_string_get</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, usbd_enum.o(.text.serial_string_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = serial_string_get &rArr; int_to_unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[21]"></a>setAndroid_Ctrl</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, snmpdemo.o(.text.setAndroid_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = setAndroid_Ctrl &rArr; Android_Ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Android_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[245]"></a>setEntry</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, snmplib.o(.text.setEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setEntry &rArr; getValue
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getValue
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVarBind
</UL>

<P><STRONG><a name="[20]"></a>setOutput_Off</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, snmpdemo.o(.text.setOutput_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setOutput_Off &rArr; DO_Output_Ctrl &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DO_Output_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[1f]"></a>setOutput_On</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, snmpdemo.o(.text.setOutput_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setOutput_On &rArr; DO_Output_Ctrl &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DO_Output_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[23]"></a>setRj45_MAC</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, snmpdemo.o(.text.setRj45_MAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = setRj45_MAC &rArr; strtomac &rArr; GetHex
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtomac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[22]"></a>setWIZnetLed</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, snmpdemo.o(.text.setWIZnetLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setWIZnetLed &rArr; Led_Ctrl &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snmpdemo.o(.data.snmpData)
</UL>
<P><STRONG><a name="[175]"></a>set_pvt_para</STRONG> (Thumb, 1824 bytes, Stack size 40 bytes, comm_process.o(.text.set_pvt_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = set_pvt_para &rArr; WriteConfigParaFromIICAll &rArr; WriteFlash_CPU &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaFromIICAll
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
</UL>

<P><STRONG><a name="[15c]"></a>sht3x_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, i2c_hal.o(.text.sht3x_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sht3x_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_Init
</UL>

<P><STRONG><a name="[ca]"></a>spi_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e50x_spi.o(.text.spi_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_IO_Init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch432t_IO_Init
</UL>

<P><STRONG><a name="[d6]"></a>spi_i2s_data_receive</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gd32e50x_spi.o(.text.spi_i2s_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WriteByte
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCH432Data
</UL>

<P><STRONG><a name="[d5]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e50x_spi.o(.text.spi_i2s_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WriteByte
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCH432Data
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCH432Block
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCH432Data
</UL>

<P><STRONG><a name="[d4]"></a>spi_i2s_flag_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32e50x_spi.o(.text.spi_i2s_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi_i2s_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_WriteByte
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCH432Data
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCH432Block
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCH432Data
</UL>

<P><STRONG><a name="[c9]"></a>spi_init</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, gd32e50x_spi.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1247_IO_Init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch432t_IO_Init
</UL>

<P><STRONG><a name="[100]"></a>strIP2ip</STRONG> (Thumb, 170 bytes, Stack size 28 bytes, wifi_ble.o(.text.strIP2ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = strIP2ip
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pvt_para
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgWifiPara
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Init
</UL>

<P><STRONG><a name="[21b]"></a>strIntTostrFloat</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, usb_para.o(.text.strIntTostrFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strIntTostrFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package
</UL>

<P><STRONG><a name="[11b]"></a>strcmp_</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usb_para.o(.text.strcmp_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp_
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
</UL>

<P><STRONG><a name="[125]"></a>strtoip</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, usb_para.o(.text.strtoip))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strtoip
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal2
</UL>

<P><STRONG><a name="[124]"></a>strtomac</STRONG> (Thumb, 242 bytes, Stack size 80 bytes, usb_para.o(.text.strtomac))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = strtomac &rArr; GetHex
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHex
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRj45_MAC
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal2
</UL>

<P><STRONG><a name="[e7]"></a>systick_config</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, systick.o(.text.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = systick_config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[236]"></a>uart_get_data</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, comm_process.o(.text.uart_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = uart_get_data &rArr; Send_Modbus &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Modbus
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_device_info
</UL>

<P><STRONG><a name="[14e]"></a>uart_set_data_modbus16</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, comm_process.o(.text.uart_set_data_modbus16))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = uart_set_data_modbus16 &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheck
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenCtrl
</UL>

<P><STRONG><a name="[19e]"></a>uart_set_data_modbus6_com</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, comm_process.o(.text.uart_set_data_modbus6_com))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = uart_set_data_modbus6_com &rArr; Com_Send &rArr; Write_SOCK_Data_Buffer &rArr; Write_W5500_SOCK_4Byte &rArr; w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheck
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
</UL>

<P><STRONG><a name="[1d3]"></a>ulSetInterruptMask</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, portasm.o(.text.ulSetInterruptMask))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler_C
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[113]"></a>usart5_flag_get</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gd32e50x_usart.o(.text.usart5_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart5_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
</UL>

<P><STRONG><a name="[233]"></a>usart5_interrupt_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart5_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart5_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[1dd]"></a>usart5_interrupt_flag_clear</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart5_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart5_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
</UL>

<P><STRONG><a name="[1dc]"></a>usart5_interrupt_flag_get</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, gd32e50x_usart.o(.text.usart5_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usart5_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
</UL>

<P><STRONG><a name="[22a]"></a>usart5_overrun_disable</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32e50x_usart.o(.text.usart5_overrun_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart5_overrun_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[22c]"></a>usart_baudrate_set</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, gd32e50x_usart.o(.text.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[1da]"></a>usart_data_receive</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>usart_data_transmit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
</UL>

<P><STRONG><a name="[22b]"></a>usart_deinit</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, gd32e50x_usart.o(.text.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usart_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[232]"></a>usart_enable</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, gd32e50x_usart.o(.text.usart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[118]"></a>usart_flag_get</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gd32e50x_usart.o(.text.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
</UL>

<P><STRONG><a name="[234]"></a>usart_interrupt_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[1db]"></a>usart_interrupt_flag_clear</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[1d9]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, gd32e50x_usart.o(.text.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[22f]"></a>usart_parity_config</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart_parity_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_parity_config
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[230]"></a>usart_receive_config</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, gd32e50x_usart.o(.text.usart_receive_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_receive_config
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[22e]"></a>usart_stop_bit_set</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart_stop_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_stop_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[231]"></a>usart_transmit_config</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, gd32e50x_usart.o(.text.usart_transmit_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_transmit_config
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[22d]"></a>usart_word_length_set</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gd32e50x_usart.o(.text.usart_word_length_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_word_length_set
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[1f8]"></a>usbd_class_request</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usbd_enum.o(.text.usbd_class_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_class_request
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[211]"></a>usbd_ep_recev</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, usbd_core.o(.text.usbd_ep_recev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usbd_ep_recev &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_receive
</UL>

<P><STRONG><a name="[210]"></a>usbd_ep_send</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, usbd_core.o(.text.usbd_ep_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_in
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_data_in
</UL>

<P><STRONG><a name="[189]"></a>usbd_init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usbd_init &rArr; serial_string_get &rArr; int_to_unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_string_get
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[1e0]"></a>usbd_isr</STRONG> (Thumb, 856 bytes, Stack size 32 bytes, usbd_lld_int.o(.text.usbd_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_isr &rArr; usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_suspend
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_mcu
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[1f7]"></a>usbd_standard_request</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_enum.o(.text.usbd_standard_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_standard_request
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[1f9]"></a>usbd_vendor_request</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_enum.o(.text.usbd_vendor_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_vendor_request
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[25c]"></a>uxListRemove</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, list.o(.text.uxListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1d5]"></a>vClearInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, portasm.o(.text.vClearInterruptMask))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>

<P><STRONG><a name="[25d]"></a>vListInsertEnd</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[222]"></a>vPortEnterCritical</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
</UL>

<P><STRONG><a name="[223]"></a>vPortExitCritical</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMask
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
</UL>

<P><STRONG><a name="[90]"></a>vPortSVCHandler_C</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, port.o(.text.vPortSVCHandler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPortSVCHandler_C
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRestoreContextOfFirstTask
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupFPU
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portasm.o(.text.SVC_Handler)
</UL>
<P><STRONG><a name="[25e]"></a>vPortYield</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(.text.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[25b]"></a>vRestoreContextOfFirstTask</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, portasm.o(.text.vRestoreContextOfFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler_C
</UL>

<P><STRONG><a name="[120]"></a>vTaskResume</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, tasks.o(.text.vTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskResume &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
</UL>

<P><STRONG><a name="[96]"></a>vTaskSwitchContext</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[e9]"></a>w5500_config</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, w5500.o(.text.w5500_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = w5500_config &rArr; nvic_irq_enable &rArr; nvic_priority_group_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1b9]"></a>w5500_read_byte</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w5500.o(.text.w5500_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = w5500_read_byte &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[1b8]"></a>w5500_send_byte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, w5500.o(.text.w5500_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_halfword
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_read_byte
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_nByte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_2Byte
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[1b7]"></a>w5500_send_halfword</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, w5500.o(.text.w5500_send_halfword))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = w5500_send_halfword &rArr; w5500_send_byte &rArr; spi_i2s_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_nByte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_4Byte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_2Byte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_SOCK_1Byte
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_2Byte
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500_1Byte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SOCK_Data_Buffer
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_2Byte
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_SOCK_1Byte
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500_1Byte
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SOCK_Data_Buffer
</UL>

<P><STRONG><a name="[de]"></a>wdt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.wdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pvt_para
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_rev_data
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ads1247_calibrate
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Modbus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Retransmission
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_setsystime
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWifiPara
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitPassthroughMode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe_WB
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect_Gateway
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_device_info
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_process_usb
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Interrupt_Process
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTU_Process
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Socket_Data
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTH_SHT3X
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G4_Task
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherNet_Tran2Com
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherNet_P
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Tran
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com2Com
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiPolling
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiClkStretch
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_WriteCommand
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_Read2BytesAndCrc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_CalcCrc
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsddata_package
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reset
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putStr
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package2
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_package
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configinfo_analy
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Rj45_Param
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDataDeal
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Reset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSThread
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe
</UL>

<P><STRONG><a name="[1e8]"></a>wifi_reset</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gd32e503v_eval.o(.text.wifi_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wifi_reset &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerWifiBle_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Rj45_Param
</UL>

<P><STRONG><a name="[217]"></a>wsddata_package</STRONG> (Thumb, 1038 bytes, Stack size 112 bytes, usb_para.o(.text.wsddata_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wsddata_package &rArr; putStr &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putStr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_getsystime
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_process_usb
</UL>

<P><STRONG><a name="[1d2]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1d4]"></a>xTaskIncrementTick</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[260]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27c]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[27d]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[27e]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[145]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_base_info
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_check
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Data_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpCode
</UL>

<P><STRONG><a name="[262]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27f]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[280]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[281]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[fb]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pvt_para
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Send
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe_WB
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgWifiPara
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Rece_Proces
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Run
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_RTU
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWIZnetLed
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRj45
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRTS
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOutputStatus
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModbus_ID
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInputStatus
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDipStatus
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDeviceTempe
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getComInfo
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBat
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAndroid_Ctrl
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAd
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get12V
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExe
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[282]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[283]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[284]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[285]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[182]"></a>Main_Task</STRONG> (Thumb, 1688 bytes, Stack size 120 bytes, main.o(.text.Main_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 4200<LI>Call Chain = Main_Task &rArr; G4_Task &rArr; MQTT_Run &rArr; MQTT_PUBLISH &rArr; get_pvt_para &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_base_info
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_device_info
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_check
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_process_usb
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch432t_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_receive
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_check_ready
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SW_Input_State
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DI_Input_State
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTU_Process
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Upload_Device_Total_ReadFromW25QXX
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Upload_Device_ID_ReadFromW25QXX
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_PINGREQ_Time_Interval_ReadFromW25QXX
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Ctrl_Relay
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Ctrl
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTH_SHT3X
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G4_Task
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherNet_P
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Get_Sta
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Tran
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com2Com
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com1_Boot
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Uart_Buffer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH432_Int_Process
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackMotor_Ctrl
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_software_trigger
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cycle_Detect_Process
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>usbd_connect</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.usbd_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[1d0]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, systick.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[1d1]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, systick.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[1bc]"></a>SHT3X_CalcCrc</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, sht3x.o(.text.SHT3X_CalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SHT3X_CalcCrc &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_CheckCrc
</UL>

<P><STRONG><a name="[1c6]"></a>SHT3X_CalcHumidity</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, sht3x.o(.text.SHT3X_CalcHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SHT3X_CalcHumidity
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiPolling
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiClkStretch
</UL>

<P><STRONG><a name="[1c5]"></a>SHT3X_CalcTemperature</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, sht3x.o(.text.SHT3X_CalcTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SHT3X_CalcTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiPolling
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiClkStretch
</UL>

<P><STRONG><a name="[1bd]"></a>SHT3X_CheckCrc</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sht3x.o(.text.SHT3X_CheckCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SHT3X_CheckCrc &rArr; SHT3X_CalcCrc &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_CalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_Read2BytesAndCrc
</UL>

<P><STRONG><a name="[1c3]"></a>SHT3X_Read2BytesAndCrc</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sht3x.o(.text.SHT3X_Read2BytesAndCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SHT3X_Read2BytesAndCrc &rArr; SHT3X_CheckCrc &rArr; SHT3X_CalcCrc &rArr; wdt &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_ReadByte
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_CheckCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiPolling
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiClkStretch
</UL>

<P><STRONG><a name="[1c2]"></a>SHT3X_StartReadAccess</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sht3x.o(.text.SHT3X_StartReadAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SHT3X_StartReadAccess &rArr; I2c_WriteByte &rArr; SDA_READ &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WriteByte
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiPolling
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiClkStretch
</UL>

<P><STRONG><a name="[1c0]"></a>SHT3X_StartWriteAccess</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sht3x.o(.text.SHT3X_StartWriteAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SHT3X_StartWriteAccess &rArr; I2c_WriteByte &rArr; SDA_READ &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WriteByte
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StartCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiPolling
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiClkStretch
</UL>

<P><STRONG><a name="[1c4]"></a>SHT3X_StopAccess</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sht3x.o(.text.SHT3X_StopAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SHT3X_StopAccess &rArr; I2c_StopCondition &rArr; SDA_OPEN &rArr; gpio_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_StopCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiPolling
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiClkStretch
</UL>

<P><STRONG><a name="[1c1]"></a>SHT3X_WriteCommand</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sht3x.o(.text.SHT3X_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SHT3X_WriteCommand &rArr; I2c_WriteByte &rArr; SDA_READ &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiPolling
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3X_GetTempAndHumiClkStretch
</UL>

<P><STRONG><a name="[161]"></a>I2c_WaitWhileClockStreching</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, i2c_hal.o(.text.I2c_WaitWhileClockStreching))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2c_WaitWhileClockStreching &rArr; SCL_READ &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_READ
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMicroSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_ReadByte
</UL>

<P><STRONG><a name="[254]"></a>system_clock_168m_hxtal</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, system_gd32e50x.o(.text.system_clock_168m_hxtal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = system_clock_168m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[1d6]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32e50x.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = system_clock_config &rArr; system_clock_168m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_168m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[226]"></a>fmc_ready_wait</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gd32e50x_fmc.o(.text.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[227]"></a>fmc_state_get</STRONG> (Thumb, 124 bytes, Stack size 4 bytes, gd32e50x_fmc.o(.text.fmc_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[23a]"></a>__NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32e50x_misc.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_system_reset
</UL>

<P><STRONG><a name="[2a]"></a>usbd_address_set</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, usbd_lld_core.o(.text.usbd_address_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usbd_address_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[27]"></a>usbd_core_reset</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_core_reset))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[28]"></a>usbd_core_stop</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_core_stop))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[29]"></a>usbd_dp_pullup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbd_lld_core.o(.text.usbd_dp_pullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_dp_pullup &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[33]"></a>usbd_ep_data_read</STRONG> (Thumb, 320 bytes, Stack size 20 bytes, usbd_lld_core.o(.text.usbd_ep_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_ep_data_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[32]"></a>usbd_ep_data_write</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, usbd_lld_core.o(.text.usbd_ep_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_data_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[30]"></a>usbd_ep_disable</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, usbd_lld_core.o(.text.usbd_ep_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[2e]"></a>usbd_ep_reset</STRONG> (Thumb, 228 bytes, Stack size 12 bytes, usbd_lld_core.o(.text.usbd_ep_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_ep_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[31]"></a>usbd_ep_rx_enable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usbd_lld_core.o(.text.usbd_ep_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_rx_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[2f]"></a>usbd_ep_setup</STRONG> (Thumb, 840 bytes, Stack size 24 bytes, usbd_lld_core.o(.text.usbd_ep_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[35]"></a>usbd_ep_stall_clear</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, usbd_lld_core.o(.text.usbd_ep_stall_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_stall_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[34]"></a>usbd_ep_stall_set</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, usbd_lld_core.o(.text.usbd_ep_stall_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_stall_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[36]"></a>usbd_ep_status</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_lld_core.o(.text.usbd_ep_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[2c]"></a>usbd_leave_suspend</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_leave_suspend))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[2d]"></a>usbd_resume</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, usbd_lld_core.o(.text.usbd_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usbd_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[2b]"></a>usbd_suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_suspend))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[259]"></a>resume_mcu</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_lld_int.o(.text.resume_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = resume_mcu
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[257]"></a>usbd_int_suspend</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_lld_int.o(.text.usbd_int_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_int_suspend &rArr; usbd_to_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_to_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[258]"></a>usbd_to_suspend</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_lld_int.o(.text.usbd_to_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_to_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_suspend
</UL>

<P><STRONG><a name="[256]"></a>usb_transc_config</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usbd_core.o(.text.usb_transc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>

<P><STRONG><a name="[1fd]"></a>_usb_bos_desc_get</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_bos_desc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_bos_desc_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getdescriptor
</UL>

<P><STRONG><a name="[25]"></a>_usb_config_desc_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, usbd_enum.o(.text._usb_config_desc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _usb_config_desc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data.std_desc_get)
</UL>
<P><STRONG><a name="[24]"></a>_usb_dev_desc_get</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, usbd_enum.o(.text._usb_dev_desc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _usb_dev_desc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data.std_desc_get)
</UL>
<P><STRONG><a name="[1]"></a>_usb_std_clearfeature</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, usbd_enum.o(.text._usb_std_clearfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _usb_std_clearfeature &rArr; usbd_ep_clear_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear_stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[7]"></a>_usb_std_getconfiguration</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usbd_enum.o(.text._usb_std_getconfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _usb_std_getconfiguration &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[5]"></a>_usb_std_getdescriptor</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, usbd_enum.o(.text._usb_std_getdescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _usb_std_getdescriptor &rArr; _usb_bos_desc_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_bos_desc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[9]"></a>_usb_std_getinterface</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, usbd_enum.o(.text._usb_std_getinterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _usb_std_getinterface &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[0]"></a>_usb_std_getstatus</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, usbd_enum.o(.text._usb_std_getstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _usb_std_getstatus &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[2]"></a>_usb_std_reserved</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_reserved))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _usb_std_reserved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[4]"></a>_usb_std_setaddress</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, usbd_enum.o(.text._usb_std_setaddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _usb_std_setaddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[8]"></a>_usb_std_setconfiguration</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, usbd_enum.o(.text._usb_std_setconfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _usb_std_setconfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[6]"></a>_usb_std_setdescriptor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_setdescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _usb_std_setdescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[3]"></a>_usb_std_setfeature</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, usbd_enum.o(.text._usb_std_setfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _usb_std_setfeature &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[a]"></a>_usb_std_setinterface</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_std_setinterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_std_setinterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[b]"></a>_usb_std_synchframe</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_synchframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _usb_std_synchframe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[26]"></a>_usb_str_desc_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_str_desc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_str_desc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data.std_desc_get)
</UL>
<P><STRONG><a name="[251]"></a>int_to_unicode</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, usbd_enum.o(.text.int_to_unicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_string_get
</UL>

<P><STRONG><a name="[1fc]"></a>usb_transc_config</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usbd_enum.o(.text.usb_transc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getstatus
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getinterface
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getconfiguration
</UL>

<P><STRONG><a name="[1fb]"></a>usbd_ep_clear_stall</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_enum.o(.text.usbd_ep_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_clearfeature
</UL>

<P><STRONG><a name="[1fe]"></a>usbd_ep_stall</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_enum.o(.text.usbd_ep_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_setfeature
</UL>

<P><STRONG><a name="[1f2]"></a>usb_0len_packet_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usbd_transc.o(.text.usb_0len_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_0len_packet_send
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_in0_transc
</UL>

<P><STRONG><a name="[1fa]"></a>usb_ctl_data_in</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_transc.o(.text.usb_ctl_data_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usb_ctl_data_in &rArr; usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[1f3]"></a>usb_ctl_out</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_transc.o(.text.usb_ctl_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_ctl_out
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_in0_transc
</UL>

<P><STRONG><a name="[1f5]"></a>usb_ctl_status_in</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usbd_transc.o(.text.usb_ctl_status_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_ctl_status_in
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_out0_transc
</UL>

<P><STRONG><a name="[1f6]"></a>usb_stall_transc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_transc.o(.text.usb_stall_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_stall_transc &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[1f4]"></a>usb_transc_config</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usbd_transc.o(.text.usb_transc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_out0_transc
</UL>

<P><STRONG><a name="[255]"></a>usbd_ep_stall</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_transc.o(.text.usbd_ep_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stall_transc
</UL>

<P><STRONG><a name="[f]"></a>cdc_acm_ctlx_out</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cdc_acm_core.o(.text.cdc_acm_ctlx_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cdc_acm_ctlx_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[10]"></a>cdc_acm_data_in</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cdc_acm_core.o(.text.cdc_acm_data_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = cdc_acm_data_in &rArr; usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[11]"></a>cdc_acm_data_out</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, cdc_acm_core.o(.text.cdc_acm_data_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cdc_acm_data_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[d]"></a>cdc_acm_deinit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cdc_acm_core.o(.text.cdc_acm_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cdc_acm_deinit &rArr; usbd_ep_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[c]"></a>cdc_acm_init</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, cdc_acm_core.o(.text.cdc_acm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cdc_acm_init &rArr; usbd_ep_init
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[e]"></a>cdc_acm_req_handler</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cdc_acm_core.o(.text.cdc_acm_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cdc_acm_req_handler &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_acm_core.o(.data.cdc_class)
</UL>
<P><STRONG><a name="[214]"></a>usb_transc_config</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, cdc_acm_core.o(.text.usb_transc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_req_handler
</UL>

<P><STRONG><a name="[212]"></a>usbd_ep_deinit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cdc_acm_core.o(.text.usbd_ep_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_deinit
</UL>

<P><STRONG><a name="[213]"></a>usbd_ep_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, cdc_acm_core.o(.text.usbd_ep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
</UL>

<P><STRONG><a name="[25f]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[24b]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tasks.o(.text.prvTaskIsTaskSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[25a]"></a>prvSetupFPU</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(.text.prvSetupFPU))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler_C
</UL>

<P><STRONG><a name="[263]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[261]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[266]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[265]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[95]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
